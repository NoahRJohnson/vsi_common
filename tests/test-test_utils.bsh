#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.bsh"
VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
. "$(dirname "${BASH_SOURCE[0]}")/test_utils.bsh"
. "${VSI_COMMON_DIR}/linux/compat.bsh"

function common_check_array_test()
{
  a1=()
  a2=(11 22 33)
  ${1} a1
  ${1} a2 11 22 33

  bq="${bash_declare_array_quote}"

  ans0=$'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ"$'\n'

  not ${1} a1 "" &> /dev/null
  ans="${ans0}a1=()"
  ans+=$'\nArray had 1 too few values'
  ans+=$'\ndeclare -a a1='"${bq}()${bq}"
  [[ $(${1} a1 "" 2>&1) = \
     *${ans}* ]] || false

  not ${1} a2 11 22 33 44 &> /dev/null
  ans="${ans0}a2=(11 22 33)"
  ans+=$'\nArray had 1 too few values'
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [1]="22" [2]="33")'"${bq}"
  [[ $(${1} a2 11 22 33 44 2>&1) = *"${ans}"* ]] || false
  # When ans has a literal " in it, do you have to put quotes around it in [[]]

  not ${1} a2 22 33 &> /dev/null
  ans="${ans0}Element 0 (a2[0]) is different:"
  ans+=$'\n11 !='"${2-} 22"
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [1]="22" [2]="33")'"${bq}"
  [[ $(${1} a2 22 33 2>&1) = \
     *"${ans}"* ]] || false

  not ${1} a2 11 33 &> /dev/null
  ans="${ans0}Element 1 (a2[1]) is different:"
  ans+=$'\n22 !='"${2-} 33"
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [1]="22" [2]="33")'"${bq}"
  [[ $(${1} a2 11 33 2>&1) = \
     *"${ans}"* ]] || false

  not ${1} a2 11 22 &> /dev/null
  ans="${ans0}a2=(11 22 33)"
  ans+=$'\nArray had 1 too many values'
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [1]="22" [2]="33")'"${bq}"
  [[ $(${1} a2 11 22 2>&1) = \
     *"${ans}"* ]] || false

  # Non contiguous case
  unset a2[1]
  not ${1} a2 11 22
  ans="${ans0}Element 1 (a2[2]) is different:"
  ans+=$'\n33 !='"${2-} 22"
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [2]="33")'"${bq}"
  [[ $(${1} a2 11 22 2>&1) = \
     *"${ans}"* ]] || false
}

begin_test "Test check array"
(
  setup_test

  common_check_array_test check_a
)
end_test

begin_test "Test regex check array"
(
  setup_test
  common_check_array_test check_ra '~'

  a2=(11 22 33)

  check_ra a2 1+ '^[0-9]+$' 3
  check_ra a2 2* . '^33$'
  not check_ra a2 1+ '^[0-9]+$' 4 &> /dev/null
  ans="${ans0}Element 2 (a2[2]) is different:"
  ans+=$'\n33 !=~ 4'
  ans+=$'\ndeclare -a a2='"${bq}"'([0]="11" [1]="22" [2]="33")'"${bq}"
  [[ $(check_ra a2 1+ '^[0-9]+$' 4 2>&1) = *"${ans}"* ]] || false
)
end_test

begin_test "Test contiguous array"
(
  setup_test
  a1=(1 2 3)
  contiguous_a a1

  unset a1[0]
  not contiguous_a a1

  a1=(1 2 3)
  unset a1[1]
  not contiguous_a a1
  a1+=(4)
  not contiguous_a a1

  a1=(1 2 3)
  unset a1[2]
  contiguous_a a1
  unset a1[1]
  contiguous_a a1
  a1+=(4)
  contiguous_a a1
  unset a1[1]
  unset a1[0]
  contiguous_a a1
  a1+=(4)
  contiguous_a a1
)
end_test

begin_test "Test check string"
(
  setup_test

  check_str 1234567890 1234567890

  function ans()
  {
    echo $'\e[1;31m'"ERROR"$'\e[0m'": Strings differ"
    echo "====================="
    echo "${1}"$'\e[1;31m'"${2}"$'\e[0m'"${3}"
    echo "---------------------"
    echo "${4}"$'\e[1;31m'"${5}"$'\e[0m'"${6}"
  }

  # Make sure the rv is non-zero
  not check_str 1234567890 1234566890 &> /dev/null
  # Middles wrong
  [[ $(check_str 1234567890 1234566890 2>&1) = *$(ans 123456 7 890 123456 6 890)* ]]
  [[ $(check_str 1234567890 1234576890 2>&1) = *$(ans 12345 67 890 12345 76 890)* ]]
  [[ $(check_str 1234567890 12345890 2>&1) = *$(ans 12345 67 890 12345 "" 890)* ]]
  [[ $(check_str 12345890 1234567890 2>&1) = *$(ans 12345 "" 890 12345 67 890)* ]]
  [[ $(check_str 1234555890 123455567890 2>&1) = *$(ans 1234555 "" 890 1234555 67 890)* ]]
  [[ $(check_str 1234567890 1@34567890 2>&1) = *$(ans 1 2 34567890 1 @ 34567890)* ]]
  [[ $(check_str 1234567890 12345678^0 2>&1) = *$(ans 12345678 9 0 12345678 ^ 0)* ]]

  # Beginning wrong
  [[ $(check_str abcdef ABCdef 2>&1) = *$(ans "" abc def "" ABC def)* ]]
  [[ $(check_str abcdef Abcdef 2>&1) = *$(ans "" a bcdef "" A bcdef)* ]]
  [[ $(check_str abcdef bcdef 2>&1) = *$(ans "" a bcdef "" "" bcdef)* ]]
  [[ $(check_str bcdef abcdef 2>&1) = *$(ans "" "" bcdef "" a bcdef)* ]]
  # End wrong
  [[ $(check_str uvwxyz uvwXYZ 2>&1) = *$(ans uvw xyz "" uvw XYZ "")* ]]
  [[ $(check_str uvwxyz uvwxyZ 2>&1) = *$(ans uvwxy z "" uvwxy Z "")* ]]
  [[ $(check_str uvwxyz uvwxy 2>&1) = *$(ans uvwxy z "" uvwxy "" "")* ]]
  [[ $(check_str uvwxy uvwxyz 2>&1) = *$(ans uvwxy "" "" uvwxy z "")* ]]

  # Corner case due to malformed for loop (, instead of &&)
  [[ $(check_str 167890ab 167767890ab 2>&1) = *$(ans 167 "" 890ab 167 767 890ab)* ]]
)
end_test
