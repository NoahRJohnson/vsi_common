#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.bsh"

begin_test "Test Success"
(
  setup_test

  echo "Working test ${@+${@}}"
)
end_test

begin_expected_fail_test "Test Expected Fail"
(
  setup_test

  echo "Failing test ${@+${@}}"

  begin_fail_zone
  false
)
end_test

begin_required_fail_test "Test Required Fail"
(
  setup_test

  echo "Required fail test ${@+${@}}"

  begin_fail_zone
  false
)
end_test

skip_next_test
begin_test "Test Skipped Test"
(
  setup_test

  false
)
end_test

begin_test "Test not"
(
  setup_test

  not false

  if not true; then
    false
  else
    true
  fi

  not not true
)
end_test

begin_test "Test not_s"
(
  setup_test

  not_s "[[ 1 == 2 ]]"
  not not_s "[[ 1 == 1 ]]"

  not_s "(( 1+5 < 6 )) "

  x=test
  y='t.st'
  not not_s '[[ $x =~ $y ]]'
  x=toast
  not_s '[[ $x =~ $y ]]'

  not_s "not_s true"
  not not_s "not_s false"
)
end_test

# I lose the cwd when I run begin_test
THIS_TEST_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
begin_test "Run actual failing tests"
(
  setup_test
  # Prevent TESTLIB vars interferring with the QUIZ
  unset TESTLIB_SKIP_TESTS TESTLIB_RUN_SINGLE_TEST TESTLIB_STOP_AFTER_FAILS

  # Output this whole test to stdout. It make reading logs a LOT easier
  TESTLIB_SUMMARY_DIR=${TESTDIR} "${THIS_TEST_DIR}/quiz-testlib.bsh" 2>&1 || :

  summary_file="${TESTDIR}/quiz-testlib.bsh"

  # There should be 5 failures and 2 unexpected successes!
  [ "$(awk '{print $2" "$3}' "${summary_file}")" = "8 2" ]
)
end_test


begin_test "Test TESTLIB_STOP_AFTER_FAILS"
(
  setup_test
  unset TESTLIB_SKIP_TESTS TESTLIB_RUN_SINGLE_TEST

  summary_file="${TESTDIR}/quiz-testlib.bsh"

  # Zero already tested above

  TESTLIB_STOP_AFTER_FAILS=1 TESTLIB_SUMMARY_DIR=${TESTDIR} "${THIS_TEST_DIR}/quiz-testlib.bsh" 2>&1 || :
  # There should be 1 failure, 2 skips!
  [ "$(awk '{print $2" "$6}' "${summary_file}")" = "1 9" ]

  TESTLIB_STOP_AFTER_FAILS=2 TESTLIB_SUMMARY_DIR=${TESTDIR} "${THIS_TEST_DIR}/quiz-testlib.bsh" 2>&1 || :
  # There should be 2 failure, 1 skips!
  [ "$(awk '{print $2" "$6}' "${summary_file}")" = "2 8" ]
)
end_test

begin_expected_fail_test "Test expected to fail end_fail_zone"
(
  setup_test

  begin_fail_zone
  true
  end_fail_zone

  true

  begin_fail_zone
  false
)
end_test