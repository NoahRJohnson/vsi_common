#!/usr/bin/env false bash

#*# tests/test_utils

. "${VSI_COMMON_DIR}/linux/string_tools.bsh"

#**
# ==============
# Test Utilities
# ==============
#
# .. default-domain:: bash
#
# .. file:: test_utils.bsh
#
# Utilities to help in test verifications
#**

#**
# .. function:: check_a
#
# :Arguments: * ``$1`` - Array name
#             * [``$2``...] - Array values
# :Output: Return Value:
#
#             * ``0`` - Equal
#             * ``1`` - A value is not the same
#             * ``2`` - The array had less values than specified
#
# Check array values for unit tests
#
# .. seealso::
#   :func:`elements.bsh cmp_elements_a`
#**
function check_a()
{
  set +xv

  local check_a_indicies
  local check_a_name="${1}[@]"
  local check_a_values=(${!check_a_name+"${!check_a_name}"})
  check_a_name="${1}"
  eval 'check_a_indicies=("${!'$1'[@]}")'
  local check_a_index
  shift 1

  for check_a_index in ${check_a_values[@]+"${!check_a_values[@]}"}; do
    if [ $# -eq 0 ]; then
      echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
      echo "${check_a_name}=(${check_a_values[@]+${check_a_values[@]}})" >&2
      echo "Array had $((${#check_a_values[@]} - check_a_index)) too many values" >&2
      declare -p "${check_a_name}" >&2
      set -xv
      return 3
    fi
    if [ "${check_a_values[check_a_index]}" != "$1" ]; then
      echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
      echo "Element ${check_a_index} (${check_a_name}[${check_a_indicies[check_a_index]}]) is different:" >&2
      echo "${check_a_values[check_a_index]} != $1" >&2
      declare -p "${check_a_name}" >&2
      set -xv
      return 1
    fi
    shift 1
  done
  if [ $# -eq 0 ]; then
    set -xv
    return 0
  else
    echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
    echo "${check_a_name}=(${check_a_values[@]+${check_a_values[@]}})" >&2
    echo "Array had $# too few values" >&2
    declare -p "${check_a_name}" >&2
    set -xv
    return 2
  fi
}

#**
# .. function:: check_ra
#
# Regex version of :func:`check_a`
#**
function check_ra()
{
  set +xv
  local check_a_indicies
  local check_a_name="${1}[@]"
  local check_a_values=(${!check_a_name+"${!check_a_name}"})
  check_a_name="${1}"
  eval 'check_a_indicies=("${!'$1'[@]}")'
  local check_a_index
  shift 1

  for check_a_index in ${check_a_values[@]+"${!check_a_values[@]}"}; do
    if [ $# -eq 0 ]; then
      echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
      echo "${check_a_name}=(${check_a_values[@]+${check_a_values[@]}})" >&2
      echo "Array had $((${#check_a_values[@]} - check_a_index)) too many values" >&2
      declare -p "${check_a_name}" >&2
      set -xv
      return 3
    fi
    if [[ ! ${check_a_values[check_a_index]} =~ $1 ]]; then
      echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
      echo "Element ${check_a_index} (${check_a_name}[${check_a_indicies[check_a_index]}]) is different:" >&2
      echo "${check_a_values[check_a_index]} !=~ $1" >&2
      declare -p "${check_a_name}" >&2
      set -xv
      return 1
    fi
    shift 1
  done
  if [ $# -eq 0 ]; then
    set -xv
    return 0
  else
    echo $'\e[1;31m'"ERROR"$'\e[0m'": Arrays differ" >&2
    echo "${check_a_name}=(${check_a_values[@]+${check_a_values[@]}})" >&2
    echo "Array had $# too few values" >&2
    declare -p "${check_a_name}" >&2
    set -xv
    return 2
  fi
}

#**
# .. function:: contiguous_a
#
# :Arguments: ``$1`` - Array name to test
# :Output: Return Value:
#
#             * ``0`` - Array is contiguous
#             * ``1`` - Array is not contiguous
#
# Check array values are contiguous for unit tests
#
# .. note::
#   Uses eval
#**
function contiguous_a()
{
  set +xv
  # Verify array is contiguous
  local contiguous_a_indicies=()
  local contiguous_a_i
  eval 'contiguous_a_indicies=("${!'$1'[@]}")'
  # Returns the result of check_a
  check_a contiguous_a_indicies $(seq 0 1 $((${#contiguous_a_indicies[@]}-1)))
  # check_a will set -xv for contiguous_a
}

function assert_str_eq()
{
  assert_str_eq "${@}"
}

function assert_str_eq
{
  set +xv
  if [ "${1}" != "${2}" ]; then
    local -i start=0
    local -i i
    local -i j

    echo $'\e[1;31m'"ERROR"$'\e[0m'": Strings differ" >&2
    echo "=====================" >&2

    for ((i=0; i<${#1}; ++i)); do
      if [ "${1:i:1}" != "${2:i:1}" ]; then
        break
      fi
    done
    start="${i}"

    # This for loop matches the same notation as the previous for loop, but is
    # numerically identical to the following for loop, that is just cleaner
    # for ((i=${#1}-1, j=${#2}-1; i>start-1 && j>start-1; --i, --j)); do
    #   if [ "${1:i:1}" != "${2:j:1}" ]; then
    #     break
    #   fi
    # done
    # i+=1
    # j+=1

    for ((i=${#1}, j=${#2}; i>start && j>start; --i, --j)); do
      if [ "${1:i-1:1}" != "${2:j-1:1}" ]; then
        break
      fi
    done

    echo "${1::start}"$'\e[41;30m'"${1:start:i-start}"$'\e[0m'"${1:i}" >&2
    echo "---------------------" >&2
    echo "${2::start}"$'\e[41;30m'"${2:start:j-start}"$'\e[0m'"${2:j}" >&2
    set -xv
    return 1
  fi
  set -xv
}

function assert_ansi_str_eq()
{
  set +xv
  local str1="$(strip_ansi "${1}")"
  local str2="$(strip_ansi "${2}")"

  assert_str_eq "${str1}" "${str2}"
  # assert_str_eq will set -xv
  return $?
}