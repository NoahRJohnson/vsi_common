#!/usr/bin/env bash

#*# tests/run_tests

#**
# =========
# Run Tests
# =========
#
# .. default-domain:: bash
#
# .. file:: run_tests.bsh
#
# :Arguments: [``$1``...] - Test scripts. Default: all test-\*\.bsh
# :Output: *stdout* - List of tests as they pass. Stdout, stderr, and env of tests that fail.
# :Author: Rick Olson
# :Copyright: * Original version: (c) 2016 by GitHub <http://github.com>
#             * License: MIT
# :Modification History: Andy Neff - Simplified. Move to bsh file names
#**

set -eu

: ${VSI_COMMON_DIR="$(\dirname "${BASH_SOURCE[0]}")/.."}
source "${VSI_COMMON_DIR}/env.bsh"
source "${VSI_COMMON_DIR}/linux/common_source.sh"
source "${VSI_COMMON_DIR}/tests/test_colors.sh"

cd "$(dirname "${BASH_SOURCE[0]}")"

#**
# .. envvar:: VERBOSE_LOGS
#
# :Default: ``0``
#
# Adds additional verbose printouts
#
# Enables additional printouts when testing, such as:
#   - Print environment if at least one test fails
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   VERBOSE_LOGS=1
#**
: ${VERBOSE_LOGS=0}
#**
# .. envvar:: TESTS_PARALLEL
#
# :Default: ``$VSI_NUMBER_CORES``
#
# Number of test scripts to run in parallel
#
# While the tests inside of a script are all run serially, multiple test scripts are run in parallel.
#
# .. note::
#   In certain complicated scenarios (either race conditions or just TMI), it is beneficial to set :envvar:`TESTS_PARALLEL` =1 just to simplify debugging
#**
: ${TESTS_PARALLEL=${VSI_NUMBER_CORES}}

#**
# .. envvar:: TEST_ARGS
#
# An array of test arguments that can be passed to every test call
#
# .. note::
#   Currently not used by any test
#**

#**
# .. envvar:: TESTS_DIR
#
# :Default: Same directory as testlib.
#
# Directory where all the test-\*\.bsh files are stored.
#
# If relative path, it is relative to :file:`testlib.sh`.
#**

export summary_log_dir="$(mktemp -d)"

function atexit()
{
  local rv=${1:-$?}

  # Optional global teardown here

  # Print any global logs here

  if [ "$rv" != "0" ] && [ "$VERBOSE_LOGS" == "1" ]; then
    # Print any global verbose logs here

    echo ""
    echo "env:"
    env
  fi

  sum=($(awk '
    {
      for (i=1;i<=NF;i++) a[i]+=$i
    }
    END{
     for (i=1;i<=NF;i++) printf a[i] " "
     printf "\n"
    }' "${summary_log_dir}"/*))

  # echo "       ____"
  # echo "      / ___| _   _ _ __ ___  _ __ ___   __ _ _ __ _   _"
  # echo "      \___ \| | | | '_ \` _ \| '_ \` _ \ / _\` | '__| | | |"
  # echo "       ___) | |_| | | | | | | | | | | | (_| | |  | |_| |"
  # echo "      |____/ \__,_|_| |_| |_|_| |_| |_|\__,_|_|   \__, |"
  # echo "                                                  |___/"
  echo

  printf "${TEST_GOOD_COLOR}Overall Summary${TEST_RESET_COLOR}: %d tests, " ${sum[0]}

  if [ "${sum[1]}" -eq 0 ]; then
    echo -n "${TEST_BOLD_COLOR}"
  else
    echo -n "${TEST_BAD_COLOR}"
  fi
  printf "%d failures${TEST_RESET_COLOR}, " ${sum[1]}
  if [ "${sum[2]}" -ne 0 ]; then
    echo -n "${TEST_WARN_COLOR}"
  else
    echo -n "${TEST_BOLD_COLOR}"
  fi
  printf "%d expected failures${TEST_RESET_COLOR}, " ${sum[2]}

  printf "%d required failures, and " ${sum[3]}
  if [ "${sum[4]}" -eq 0 ]; then
    echo -n "${TEST_BOLD_COLOR}"
  fi
  printf "%d skipped${TEST_RESET_COLOR}\n\n" ${sum[4]}

  cleanup

  exit $rv
}

trap "atexit" EXIT

function cleanup()
{
  rm -r "${summary_log_dir}"
}
trap cleanup INT
trap cleanup TERM
# Everything but kill -9 should cause a proper cleanup

# Optional global setup here

# Test setup/initialization routine here
echo "Running at maxprocs=$TESTS_PARALLEL"
echo

: ${TESTS_DIR=.}
# Get list of filenames
if [ $# -eq 0 ]; then
  testfiles=("${TESTS_DIR}"/test-*.bsh)
else
  for ((i=1; i<=$#; i++)); do
    testfiles[i]="${TESTS_DIR}"/test-${!i}.bsh
  done
fi

for file in "${testfiles[@]}"; do
  printf "%s\0" "${file}"
done | sort -z | xargs -0 -I % -P $TESTS_PARALLEL -n 1 /usr/bin/env bash -c % ${TEST_ARGS+"${TEST_ARGS[@]}"}