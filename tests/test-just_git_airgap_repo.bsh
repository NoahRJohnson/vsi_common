#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.bsh"
. "$(dirname "${BASH_SOURCE[0]}")/test_utils.bsh"

VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
. "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"

function git()
{
  case "$@" in
    remote)
      echo "${git_remote}"
      ;;
    "config --get-all remote.origin.url"|"config --get remote.origin.url")
      echo "${git_origin_url}"
      ;;
    "config --get-all remote.upstream.url")
      echo "${git_upstream_url}"
      ;;
    "for-each-ref"*)
      echo "${git_branch}"
      ;;
    "log"*)
      echo "${git_log}"
  esac
}

function cd()
{
  :
}

function picker()
{
  case "$1" in
    "Create a new mirror"*)
      return "${picker_create}"
      ;;
    "origin"*)
      return "${picker_remote}"
      ;;
    "master"*)
      return "${picker_branch}"
      ;;
  esac
}

function ask_question()
{
  case "$1" in
    "Do you want to ensure all local changes"*)
      printf -v "$2" '%i' "${ask_check}"
      ;;
    "Continue?")
      printf -v "$2" '%i' "${ask_continue}"
      ;;
  esac
}

function justify()
{
  shift 1
  echo "${@}"
}

function recursively_check_submodules_are_public()
{
  return "${check_sm_return}"
}

begin_test "Test guided repository export"
(
  setup_test
  JUST_WORKING_DIR="${PWD}"

  [ "$(relocate_git_defaultify git_export-repo-guided --prep-dir prep_dir --remote-name origin)" = \
    "Only one of --prep-dir and --remote-name can be given" ]

  [ "$(relocate_git_defaultify git_export-repo-guided --prep-dir prep_dir --output-dir output)" = \
    "Only one of --prep_dir and --output_dir can be given" ]

  # no remotes
  git_remote=""
  result=$'This repository has no remotes. Please push the repo to a\ngit server and try again.'
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n2)" = "${result}" ]

  # single remote, no urls
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url=""
  result=$'ERROR This repository is misconfigured: it has no urls for remote \'origin\'.\nPlease fix!'
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n2)" = "${result}" ]

  # single remote, single url, no branches
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch=""
  result=$'ERROR This repository is misconfigured: it has no branches.\nPlease fix!'
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n2)" = "${result}" ]

  # read must be used by just somewhere; mocking this in the global namespace
  # causes problems
  function read()
  {
    printf -v "$5" '%s' "${read_data}"
  }

  # specify remote, branch and output dir; don't check submodules for unpushed commits
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided --remote-name origin --branch master --no-check-remote --output-dir output_prep | tail -n1)" = "${result}" ]
  [ "$(relocate_git_defaultify git_export-repo-guided -r origin -b master --no-check-remote --output-dir output_prep | tail -n1)" = "${result}" ]

  # specify remote, branch and output dir; no unpushed submodule commits
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  check_sm_return=0 # submodules have all been pushed
  git_log=""
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided --remote-name origin --branch master --check-remote --output-dir output_prep | tail -n1)" = "${result}" ]

  # provide invalid remote
  picker_create=1 # create a new mirror
  git_remote="origin"
  result="ERROR Unknown git remote provided with flag --remote-name: bad_remote"
  [ "$(relocate_git_defaultify git_export-repo-guided --remote-name bad_remote | tail -n1)" = "${result}" ]

  # single remote, single url, provide invalid branch
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  result="ERROR Unknown git branch provided with flag --branch: bad_branch"
  [ "$(relocate_git_defaultify git_export-repo-guided --branch bad_branch | tail -n1)" = "${result}" ]

  # single remote, single url, single branch
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=0 # don't check for unpushed commits
  read_data="output_prep"
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # single remote, single url, single branch; no unpushed submodule commits
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=1 # check for unpushed commits
  check_sm_return=0 # submodules have all been pushed
  git_log="" # top-level repo has been pushed
  read_data="output_prep"
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # single remote, single url, single branch; unpushed submodule commits (continue anyway)
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=1 # check for unpushed commits
  check_sm_return=1 # submodules have not all been pushed
  git_log="" # top-level repo has been pushed
  ask_continue=1 # continue even though there are unpushed commits
  read_data="output_prep"
  result="https://server1.org/repo.git master output_prep"
  [ "$(not relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # single remote, single url, single branch; unpushed submodule commits (don't continue)
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=1 # check for unpushed commits
  check_sm_return=1 # submodules have not all been pushed
  git_log="" # top-level repo has been pushed
  ask_continue=0 # don't continue even though there are unpushed commits
  [[ "$(relocate_git_defaultify git_export-repo-guided | tail -n3)" = "WARNING There are unpushed changes"* ]]

  # single remote, single url, single branch; unpushed repository commits (don't continue)
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=1 # check for unpushed commits
  check_sm_return=0 # submodules have all been pushed
  git_log="There are 2 unpushed commits"
  ask_continue=0 # don't continue even though there are unpushed commits
  [[ "$(not relocate_git_defaultify git_export-repo-guided | tail -n3)" = "WARNING There are unpushed changes"* ]]

  # multiple remotes, single url (per remote), single branch
  picker_create=1 # create a new mirror
  git_remote=$'origin\nupstream'
  git_origin_url="https://server1.org/repo.git"
  git_upstream_url="https://upstream1.org/repo.git"
  git_branch="master"
  picker_remote=2 # choose a remote & url
  ask_check=0 # don't check for unpushed commits
  read_data="output_prep"
  result="https://upstream1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # single remote, multiple and duplicate urls, single branch
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url=$'https://server2.org/repo.git\nhttps://server2.org/repo.git\nhttps://server1.org/repo.git\nhttps://server2.org/repo.git'
  git_branch="master"
  picker_remote=2 # choose a remote & url
  ask_check=0 # don't check for unpushed commits
  read_data="output_prep"
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # single remote, single url, multiple branches
  picker_create=1 # create a new mirror
  git_remote="origin"
  git_origin_url="https://server1.org/repo.git"
  git_branch=$'master\nnew_branch'
  picker_branch=2 # choose a branch
  ask_check=0 # don't check for unpushed commits
  read_data="output_prep"
  result="https://server1.org/repo.git new_branch output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]

  # specify prep_dir (assuming the PWD equals the repo's root), single branch
  mkdir -p "${TESTDIR}/output_prep/repo"
  touch "${TESTDIR}/output_prep/repo/config"
  picker_create=2 # start from a prep_dir
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=0 # don't check for unpushed commits
  result="https://server1.org/repo.git master output_prep"
  [ "$(relocate_git_defaultify git_export-repo-guided --prep-dir=output_prep | tail -n1)" = "${result}" ]
  [ "$(relocate_git_defaultify git_export-repo-guided -p=output_prep | tail -n1)" = "${result}" ]

  # prep_dir (assuming the PWD does not equal the repo's root), single branch
  CWD="${TESTDIR}/repo/subdir"
  mkdir -p "${CWD}"
  mkdir -p "${TESTDIR}/output_prep/repo"
  touch "${TESTDIR}/output_prep/repo/config"
  picker_create=2 # start from a prep_dir
  git_origin_url="https://server1.org/repo.git"
  git_branch="master"
  ask_check=0 # don't check for unpushed commits
  read_data="../../output_prep"
  result="https://server1.org/repo.git master ../../output_prep"
  pushd "${TESTDIR}" &> /dev/null
    [ "$(JUST_WORKING_DIR="${CWD}" relocate_git_defaultify git_export-repo-guided | tail -n1)" = "${result}" ]
  popd &> /dev/null
)
end_test

begin_test "Argument parsing"
(
  setup_test

  # This is the first function to run after the arguments are parsed
  function git_mirror_repos()
  {
    if [ "${@}" = "${result}" ]; then
      echo pass
    else
      echo fail
    fi
    exit 0 # short circuit
  }

  JUST_WORKING_DIR="${PWD}"
  git_origin_url="https://server1.org/repo.git"
  result="https://server1.org/repo.git"
  [ "$(relocate_git_defaultify git_export-repo)" = "pass" ]


  # This is the first function to run after the arguments are parsed
  function git_mirror_repos()
  {
    if [ "${PWD}" = "${CWD}" ]; then
      echo pass
    else
      echo fail
    fi
    exit 0 # short circuit
  }

  CWD="${TESTDIR}/repo/subdir"
  mkdir -p "${CWD}"
  mkdir -p "${TESTDIR}/output_prep/repo"
  pushd "${TESTDIR}/repo" &> /dev/null
    [ "$(JUST_WORKING_DIR="${CWD}" relocate_git_defaultify git_export-repo)" = "pass" ]
  popd &> /dev/null
)
end_test
