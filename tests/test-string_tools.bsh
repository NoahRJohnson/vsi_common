#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.sh"
. "$(dirname "${BASH_SOURCE[0]}")/test_utils.bsh"

VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"

. "${VSI_COMMON_DIR}/linux/string_tools.bsh"

begin_test "String trim"
(
  setup_test

  # Normal trim
  a='     123     '
  la='123     '
  ra='     123'
  ba='123'

  # Trimming dashes
  b='--  123  --'
  lb='  123  --'
  rb='--  123  '
  bb='  123  '

  # Trimming all lower case letters
  c='qaz123wsx'
  lc='123wsx'
  rc='qaz123'
  bc='123'

  # Trim vowels
  d='aeqaz123wsxio'
  ld='qaz123wsxio'
  rd='aeqaz123wsx'
  bd='qaz123wsx'

  # Trim half the alphabet
  e='abeiouzuoieba'
  le='ouzuoieba'
  re='abeiouzuo'
  be='ouzuo'


  [ "$(ltrim "${a}")" == "${la}" ]
  [ "$(ltrim "${b}" -)" == "${lb}" ]
  [ "$(ltrim "${c}" '[:lower:]')" == "${lc}" ]
  [ "$(ltrim "${d}" 'aeiou')" == "${ld}" ]
  [ "$(ltrim "${e}" 'a-m')" == "${le}" ]

  [ "$(rtrim "${a}")" == "${ra}" ]
  [ "$(rtrim "${b}" -)" == "${rb}" ]
  [ "$(rtrim "${c}" '[:lower:]')" == "${rc}" ]
  [ "$(rtrim "${d}" 'aeiou')" == "${rd}" ]
  [ "$(rtrim "${e}" 'a-m')" == "${re}" ]

  [ "$(trim "${a}")" == "${ba}" ]
  [ "$(trim "${b}" -)" == "${bb}" ]
  [ "$(trim "${c}" '[:lower:]')" == "${bc}" ]
  [ "$(trim "${d}" 'aeiou')" == "${bd}" ]
  [ "$(trim "${e}" 'a-m')" == "${be}" ]
)
end_test

quote_tests=("hiya"
      "hi ya"
      "hi  ya"
      "hi\0ya"
      "hi\nya"
      "Hi \"  'ya \""
      '*'
      '<(ls)'
      '[ 1 = 1 ]'
      '~'
      '!! !^ !$ !?'
      '$[2*2]'
      '$((2*2))]'
      '$(ls)'
      '${q}'
      '`ls`'
      'WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-'
      'WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-')
unset q

begin_test "Quote Escape"
(
  setup_test

  # set -H
  # set -o history
  # echo "Hello!Tim"
  # This will not do history expansion in the unit test, but will outside the
  # unit test. This makes testing !! impossible.


  [ "$(quote_escape "Hiya ")" == "'Hiya '" ]
  [ "$(quote_escape "Hi \"  'ya \"")" == "'Hi \"  '\\''ya \"'" ]

  for x in "${quote_tests[@]}"; do
    eval "z=$(quote_escape "${x}")"
    [ "${z}" = "${x}" ]
    # eval "z=$(printf '%q' "${x}")"
    # [ "${z}" = "${x}" ]
  done

)
end_test

begin_test "Quote Substitute Escape"
(
  setup_test

  [ "$(quote_substitute_escape "Hiya ")" == "Hiya " ]
  [ "$(quote_substitute_escape "Hi \"  'ya \"")" == "Hi \\\"  'ya \\\"" ]

  for x in "${quote_tests[@]}"; do
    # eval "z=${y-$(quote_substitute_escape "${x}")}\"" # Wrong!
    eval "z=\"${y-$(quote_substitute_escape "${x}")}\""
    [ "${z}" = "${x}" ]
    eval "z=\"$(quote_substitute_escape "${x}")\""
    [ "${z}" = "${x}" ]
    # eval "z=${y-$(printf '%q' "${x}")}"
    # [ "${z}" = "${x}" ]
  done
)
end_test
