#!/usr/bin/env bash

. "$(dirname "${BASH_SOURCE[0]}")/testlib.sh"
. "$(dirname "${BASH_SOURCE[0]}")/test_utils.bsh"
. "$(dirname "${BASH_SOURCE[0]}")/../linux/elements.bsh"

begin_test "Dynamic Set Array"
(
  setup_test

  dynamic_set_a z
  check_a z
  not check_a z 111

  # Set up non-contiguous array
  y=(12 101 15 23 49)
  unset y[1] # Delete the 1

  # Run code
  dynamic_set_a x "${y[@]}"

  # Check values
  check_a x 12 15 23 49
  not check_a x
  contiguous_a x
  not contiguous_a y

  # Spaces
  x=(" one " " t w  o  ")
  y=()
  dynamic_set_a y "${x[@]}"
  [ "${y[0]}" = " one " ]
  [ "${y[1]}" = " t w  o  " ]
)
end_test

begin_test "Remove from Array"
(
  setup_test

  x=(12 101 15 23 49)

  # Nothing case
  remove_element_a x 1234567890
  check_a x 12 101 15 23 49

  remove_element_a x 15
  check_a x 12 101 23 49
  contiguous_a x

  remove_element_a x 12
  check_a x 101 23 49
  contiguous_a x

  remove_element_a x 49
  check_a x 101 23
  contiguous_a x

  # Size 1 case
  remove_element_a x 101
  check_a x 23
  contiguous_a x

  # Size 0 case
  remove_element_a x 23
  check_a x
  contiguous_a x

  # Remove from tails and middle cases
  x=(666 101 15 666 23 49)
  remove_element_a x 666
  check_a x 101 15 23 49
  contiguous_a x

  x=(101 15 666 23 49 666)
  remove_element_a x 666
  check_a x 101 15 23 49
  contiguous_a x

  # Everything at once!
  x=(666 666 101 666 15 666 666 23 666 49 666 666)
  remove_element_a x 666
  check_a x 101 15 23 49
  contiguous_a x
)
end_test

begin_test "Append to beginning of array"
(
  setup_test

  # Empty case
  x=()
  add_element_pre_a x 11
  check_a x 11
  contiguous_a x

  x=(11 22 33 44 11)
  add_element_pre_a x 11
  check_a x 11 22 33 44
  contiguous_a x

  add_element_pre_a x 55
  check_a x 55 11 22 33 44
  contiguous_a x

  add_element_pre_a x 22
  check_a x 22 55 11 33 44
  contiguous_a x

  x=()
  add_element_pre_a x 11
  check_a x 11
  contiguous_a x

  add_element_pre_a x 11
  check_a x 11
  contiguous_a x
)
end_test

begin_test "Append end of array"
(
  setup_test

  # Empty case
  x=()
  add_element_post_a x 11
  check_a x 11
  contiguous_a x

  x=(44 11 22 33 44)
  add_element_post_a x 44
  check_a x 11 22 33 44
  contiguous_a x

  add_element_post_a x 55
  check_a x 11 22 33 44 55
  contiguous_a x

  add_element_post_a x 22
  check_a x 11 33 44 55 22
  contiguous_a x

  x=()
  add_element_post_a x 11
  check_a x 11
  contiguous_a x

  add_element_post_a x 11
  check_a x 11
  contiguous_a x
)
end_test

begin_test "Remove from string"
(
  setup_test

  # Unset case
  declare x
  remove_element x 15
  [ "${x}" = "" ]

  # Empty case
  x=''
  remove_element x 15
  [ "${x}" = "" ]

  # "Just the one" case
  x='15'
  remove_element x 15
  [ "${x}" = "" ]

  x='12 101 15 23 49'
  remove_element x 15
  [ "${x}" = "12 101 23 49" ]

  remove_element x 12
  [ "${x}" = "101 23 49" ]

  remove_element x 49
  [ "${x}" = "101 23" ]

  x="666 101 15 666 23 49"
  remove_element x 666
  [ "${x}" = "101 15 23 49" ]

  x="101 15 666 23 49 666"
  remove_element x 666
  [ "${x}" = "101 15 23 49" ]

  x="666 666 101 666 15 666 666 23 666 49 666 666"
  remove_element x 666
  [ "${x}" = "101 15 23 49" ]

  x='12:101:15:23:49'
  IFS=':' remove_element x 15
  [ "${x}" = "12:101:23:49" ]
)
end_test

begin_test "Append to beginning of string"
(
  setup_test

  # Unset case
  declare x
  add_element_pre x 15
  [ "${x}" = "15" ]

  # Empty case
  x=''
  add_element_pre x 15
  [ "${x}" = "15" ]

  x="11 22 33 44 11"
  add_element_pre x 11
  [ "${x}" = "11 22 33 44" ]

  add_element_pre x 55
  [ "${x}" = "55 11 22 33 44" ]

  add_element_pre x 22
  [ "${x}" = "22 55 11 33 44" ]

  x="11:22:33:44:11"
  IFS=: add_element_pre x 11
  [ "${x}" = "11:22:33:44" ]
)
end_test

begin_test "Append to end of string"
(
  setup_test

  # Unset case
  declare x
  add_element_post x 15
  [ "${x}" = "15" ]

  # Empty case
  x=''
  add_element_post x 15
  [ "${x}" = "15" ]

  x="44 11 22 33 44"
  add_element_post x 44
  [ "${x}" = "11 22 33 44" ]
  add_element_post x 55
  [ "${x}" = "11 22 33 44 55" ]
  add_element_post x 22
  [ "${x}" = "11 33 44 55 22" ]

  x="44:11:22:33:44"
  IFS=: add_element_post x 44
  [ "${x}" = "11:22:33:44" ]
)
end_test

begin_test "Comparing arrays"
(
  setup_test
  a=(11 22 33)
  b=(11 22 33)
  c=(11 22 31)
  d=(11 22 33 44)
  z=()

  cmp_elements_a a b
  cmp_elements_a a a
  cmp_elements_a z z
  not cmp_elements_a a c
  not cmp_elements_a a d
  not cmp_elements_a d a
  not cmp_elements_a z a
  not cmp_elements_a a z
)
end_test

begin_test "Comparing strings"
(
  setup_test

  a="11 22  33"
  b="11 22 33"
  c="11 22 33 44"
  d="11 21 33"
  # declare z - I think this should fail. It's NOT set
  z=''

  cmp_elements a b
  cmp_elements a a
  cmp_elements z z
  not cmp_elements a c
  not cmp_elements a d
  not cmp_elements d a
  not cmp_elements z a
  not cmp_elements a z

  a="1:2:3"
  b="1: 2:3"
  IFS=": " cmp_elements a b
  c="1: 3:3"
  IFS=": " not cmp_elements b c
)
end_test

begin_test "Splitting strings"
(
  setup_test

  # Unset
  unset data
  split_s data
  check_a data

  # Empty
  unset data
  split_s data ''
  check_a data ""

  # Just one
  unset data
  split_s data 'foo'
  check_a data foo

  # Simple
  unset data
  split_s data 'foo//bar'
  check_a data foo bar

  # Path test
  unset data
  split_s data '/tmp/test.txt///opt/food///good'
  check_a data /tmp/test.txt /opt/food /good

  # Custom MIFS
  unset data
  MIFS='//://' split_s data '/tmp/test.txt///://opt/food//:///good'
  check_a data /tmp/test.txt/ opt/food /good

  # Single letter IFS
  unset data
  MIFS='/' split_s data '/tmp/test.txt///opt/food///good'
  check_a data "" tmp test.txt "" "" opt food "" "" good

  # Multiple strings
  unset data
  split_s data '/tmp/test.txt///opt/food' "good//bad" "" "hear//see//speak" ""
  check_a data /tmp/test.txt /opt/food good bad "" hear see speak ""

  # Spaces
  unset data
  split_s data ' /tmp/test.txt // /opt/fo od '
  check_a data ' /tmp/test.txt ' ' /opt/fo od '

)
end_test

begin_test "Joining arrays"
(
  setup_test

  join_a data
  [ -z "${data+set}" ]

  join_a data ""
  [ "${data}" = "" ]

  join_a data "" ""
  [ "${data}" = "//" ]

  join_a data 11 22 33
  [ "${data}" = "11//22//33" ]

  MIFS='//://' join_a data foo bar code
  [ "${data}" = "foo//://bar//://code" ]

  MIFS=":" join_a data hear see speak
  [ "${data}" = "hear:see:speak" ]

  join_a data red "" yellow green blue ""
  [ "${data}" = "red////yellow//green//blue//" ]
)
end_test

begin_test "Joining arrays to stdout"
(
  setup_test

  [ "$(join_a_out | xxd -ps)" = "$(printf '' | xxd -ps)" ]
  [ "$(join_a_out "" | xxd -ps)" = "$(printf '' | xxd -ps)" ]

  [ "$(join_a_out "" "" | xxd -ps)" = "$(printf '//' | xxd -ps)" ]

  [ "$(join_a_out 11 22 33 | xxd -ps)" = "$(printf '11//22//33' | xxd -ps)" ]

  [ "$(MIFS='//://' join_a_out foo bar code | xxd -ps)" = \
    "$(printf 'foo//://bar//://code' | xxd -ps)" ]

  [ "$(MIFS=":" join_a_out hear see speak | xxd -ps)" = \
    "$(printf 'hear:see:speak' | xxd -ps)" ]

  [ "$(join_a_out red "" yellow green blue "" | xxd -ps)" = \
    "$(printf 'red////yellow//green//blue//' | xxd -ps)" ]

  [ "$(MIFS='\\x00' join_a_out hear see speak | xxd -ps)" = \
    "$(printf 'hear\0see\0speak' | xxd -ps)" ]

)
end_test

begin_test "Is array"
(
  setup_test

  foo="ok"
  bar=("ok")
  declare -ra bar2=("doe")
  declare bar3=()

  is_array bar
  is_array bar2
  is_array bar3
  not is_array foo

  if [ "${BASH_VERSINFO[0]}" -gt "4" ] || ( [ "${BASH_VERSINFO[0]}" = "4" ] && [ "${BASH_VERSINFO[1]}" -ge "2" ] ); then
    declare -n bar4=bar3
    declare -n bar5=bar4
    declare -rau bar6=("doe")

    is_array bar4
    is_array bar5
    is_array bar6
  fi
)
end_test

begin_test "To array"
(
  setup_test

  x="this is a test"
  ans=(this is a test)
  to_array x
  check_a x "${ans[@]}"

  unset x
  x="  yet another : test "
  ans=(yet another test)
  IFS=' :' to_array x
  check_a x "${ans[@]}"

  unset x
  x="  yet another : : test "
  ans=(yet another "" test)
  IFS=' :' to_array x
  check_a x "${ans[@]}"

  unset x
  x=(11 22 "3 3")
  ans=(11 22 "3 3")
  to_array x
  check_a x "${ans[@]}"
)
end_test