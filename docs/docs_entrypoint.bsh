#!/usr/bin/env bash

set -eu

JUST_PROJECT_PREFIX=VSI_COMMON
source "${VSI_COMMON_DIR:-/vsi}/linux/just_env" "${DOCS_SOURCE_DIR-/vsi/docs}/docs.env"

if [ "${ALREADY_RUN_ONCE+set}" != "set" ]; then
  # create the user and associated groups and handle nfs symlinks
  /usr/bin/env bash /vsi/linux/docker_entrypoint.bsh

  # Rerun entrypoint as user now, (skipping the root part via ALREADY_RUN_ONCE)
  ALREADY_RUN_ONCE=1 exec gosu ${DOCKER_USERNAME} /usr/bin/env bash $0 ${@+"${@}"}
fi

function sudo()
{
  gosu root ${@+"${@}"}
}
export -f sudo

source "${VSI_COMMON_DIR}/linux/docker_functions.bsh"
# Remove duplicate DOCS_*_DOCKER variables
filter_docker_variables

if [ "$1" == "docs" ]; then
  if [ ! -s "${DOCS_SOURCE_DIR-/vsi/docs}/Pipfile.lock" ]; then
    pipenv lock
  fi
  cd /vsi/docs

  src_files=()
  doc_files=()

  mkdir -p "${DOCS_SOURCE_DIR-/vsi/docs}/_static"

  echo "Pre parsing python sphinx files..."
  rm -f "${DOCS_SOURCE_DIR-/vsi/docs}/python/"*.rst
  pipenv run sphinx-apidoc -o python ../python/vsi

  echo "Pre parsing sphinx files..."

  # For now, all languages we are using can use ## as comments. When this
  # is no longer true, the find will need to be extension specific, or
  # some mechanism will be needed to determine type, say `file`
  while read -r line; do
    # Will not work if path has newlines in it, but in the container, that
    # won't happen
    if [[ ${line} =~ (^.*):$'\t'\ *\#\*\#\ *(.*$) ]]; then
      src_files+=("${BASH_REMATCH[1]}")
      doc_files+=("${BASH_REMATCH[2]}")
    else
      echo "'$line'"
      echo "Pattern does not match"
      continue
    fi
  done < <(find "${VSI_COMMON_DIR}" -name docs -prune -o -type f -not -name '*.md' -print0 | xargs -0 grep -T -H '^ *#\*# *')

  [ "${#src_files[@]}" = "${#doc_files[@]}" ]

  for idx in "${!src_files[@]}"; do
    doc_file="${doc_files[${idx}]}"
    src_file="${src_files[${idx}]}"

    # Remove newline fun, thanks to windows
    doc_file="${doc_file//[$'\r\n']}"
    src_file="${src_file//[$'\r\n']}"

    if [ ${#doc_file} -eq 0 ]; then
      continue
    fi
    if [[ ${doc_file::1} =~ ^[./] ]] || [[ ${doc_file} =~ \.\. ]]; then
      echo "${src_file} skipped. Invalid document name ${doc_file}"
      continue
    fi

    # echo "Processing ${doc_file}"

    doc_file="${VSI_COMMON_DIR}/docs/${doc_file}"
    doc_dir="$(dirname "${doc_file}")"
    doc_file="$(basename "${doc_file}")"

    doc_ext="${doc_file##*.}"
    if [ "${doc_ext}" == "${doc_file}" ]; then
      doc_ext='rst'
    fi
    doc_file="${doc_file%.*}.auto.${doc_ext}"

    mkdir -p "${doc_dir}"

    sed -nE  ':block_start
              # If the beginning pattern matched, start reading the block
              /^#\*\*/b read_block
              # Else do not print, goes to next line
              b noprint
              :read_block
              # read the next line
              n
              # If the end of doc comment, move on to noprint
              /^ *#\*\*/{
                # Print a blank line. This removes the requirement that
                # the doc writer has to add blank # lines at the end of
                # a comment block. Other wise you get a lot of "Explicit
                # markup ends without a blank line; unexpected unindent."
                # warnings
                s/.*//
                p
                b noprint
              }
              # If a line starting with #
              /^ *#/{
                # Remove those extra spaced, #, and an optional space
                s/#+ ?//
                # print it
                p
              }
              # continue reading the block
              b read_block
              # Move on
              :noprint
             ' "${src_file}" > "${doc_dir}/${doc_file}"
  done

  exec pipenv run make SPHINXOPTS="${SPHINXOPTS-}" html
elif [ "$1" == "nopipenv" ]; then
  shift 1
  exec "${@}"
else
  if [ ! -s "${DOCS_SOURCE_DIR-/vsi/docs}/Pipfile.lock" ]; then
    pipenv lock
  fi
  exec pipenv run "${@}"
fi
