#!/usr/bin/env bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/picker

#**
# ======
# Picker
# ======
#
# .. default-domain:: bash
#
# .. file:: picker
#
# :Arguments: ``$1``... - List of choices to pick from
# :Output: *stdout* - The choice that was selected
# :Return Value: The choice selected, between 1 and N
#
# Bash CLI version of :func:`picker`
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   my_choice=$(picker Choice1 Choice2 ...)
#**

#**
# .. function:: picker
#
# :Arguments: * ``$1`` - Variable name to store choice in
#             * ``$2``... - List of choices
# :Parameters: - ``[DEFAULT_RESPONSE]`` - Default choice [1...$#] (when user presses enter only)
# :Output: * ``${!1}`` - Stores text of choice selected
#          * ``${!1}_index`` - Store the index in the array of the choice selected (starting at zero. So if 2 is selected, that's index 1)
#          * TUI outputs to stderr.
#
# Basic TUI for picking an option from a list of choices
#
# Prints list of choices, and reads an answer until the user gives a valid response
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   picker var "Choice one" "Choice II" "Choice 3"
#
#   #if 2 is selected
#   #var="Choice II"
#   #var_index=1
#
# .. rubric:: Bugs
#
# If one of your choices has a newline in it, the value of ``${!1}`` will only contain the first line
#**
function picker()
{
  if (( $# < 2 )); then
    return 0
  fi

  : ${DEFAULT_RESPONSE=}

  local key
  key=$1
  shift 1

  local args=("${@}")

  local x

  local pad="$(awk '{print int(log($1)/log(10)+1e-10)+1}' <<< "$#")"

  while true; do
    for x in "${!args[@]}"; do
      x=$((x+1))
      if [ -n "${DEFAULT_RESPONSE}" ] && [ "${x}" -eq "${DEFAULT_RESPONSE}" ]; then
        printf "%${pad}s) ${!x} (*)\n" $x >&2
      else
        printf "%${pad}s) ${!x}\n" $x >&2
      fi
    done
    echo >&2

    read -r -p "Please pick a number between 1 and $#: " x

    # Replace with default
    if [ "$x" == "" ]; then
      x="${DEFAULT_RESPONSE}"
    fi

    if [[ ${x} =~ ^[0-9]+$ ]] && [ "${x}" -gt 0 ] && [ "${x}" -le $# ]; then
      IFS='' read -r "${key}" <<< "${!x}"
      IFS='' read -r "${key}_index" <<< "$((x-1))"
      break
    fi
    echo >&2
  done
}

function usage()
{
  echo "usage: $(basename "$0") [-d|--default] \"choice 1\" \"choice 2\" ..."
  echo
}

if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
  if (( $# )); then
    default=
    while (( $# )); do
      case $1 in
        -d|--default) # Default response
          default=$2
          shift 2
          ;;
        -h|--help)
          usage
          exit 1
          ;;
        *) # Positional arguments must come after flags
          break
          ;;
      esac
    done
    DEFAULT_RESPONSE="${default}" picker my_choice ${@+"${@}"}
    echo ${my_choice}
    exit $((${my_choice_index--1}+1))
  else
    usage
    exit 1
  fi
fi