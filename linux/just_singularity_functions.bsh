if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

JUST_DEFAULTIFY_FUNCTIONS+=(singular_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

source "${VSI_COMMON_DIR}/linux/just_container_override.bsh"
source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"
source "${VSI_COMMON_DIR}/linux/singularity_functions.bsh"
source "${VSI_COMMON_DIR}/linux/command_tools.bsh"
source "${VSI_COMMON_DIR}/linux/isin"

# .. envvar: ${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES

# :Inputs: ``$1`` - Instance name
# :Outputs: * volumes
#           * flags
#           * environment
function singularity_load_env()
{
  local indirect="${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES[@]"

  local compose_file
  local instances
  for compose_file in ${!indirect+"${!indirect}"}; do
    source "${compose_file}"
  done

  if ! isin "${1}" "${instances[@]}"; then
    echo "There is no instance \"${1}\". Make sure it is in the 'instances' array" >&2
    echo "in your ${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES (${compose_files[*]})" >&2
    exit 1
  fi

  local instance_upper="$(tr '[a-z][:punct:]' '[A-Z]_' <<< ${1})"

  ######################
  ### Handle volumes ###
  ######################

  get_array_from_environment volumes "${JUST_PROJECT_PREFIX}" VOLUME "${instance_upper}"
  # Prepend volumes list from compose file
  indirect="${1}_volumes[@]"
  volumes=(${!indirect+"${!indirect}"} ${volumes[@]+"${volumes[@]}"})
  local volume
  for volume in ${volumes[@]+"${volumes[@]}"}; do
    volume="${volume%%:*}"
    if [ ! -e "${volume}" ]; then
      echo "Auto creating directory: ${volume}" >&2
      mkdir -p "${volume}"
    fi
  done

  ####################################
  ### Handle environment variables ###
  ####################################

  get_array_from_environment environment "${JUST_PROJECT_PREFIX}" ENVIRONMENT "${instance_upper}"
  indirect="${1}_environment[@]"
  # Prepent environment list with values from compose file.
  local temp=(${!indirect+"${!indirect}"} ${environment[@]+"${environment[@]}"})
  local -i i
  local s
  environment=()
  # There are two possible syntaxes for environment variables. An array
  # would have pairs of entried, that got key, value, key, value, etc.
  # However a non-array variable can only have one value, so it goes
  # "key[space]value". This means that an array can also be a list of
  # "key[space]value"s, but this wasn't the original intent, but will
  # work perfectly fine. In order to normalize these two syntaxes, the
  # array needs to be scanned and all "key[space]value" entries need to
  # be split into two entries
  for (( i=0; i<${#temp[@]}; i++ )); do
    if [[ ${temp[$i]} == *\ * ]]; then
      # Split into two in environment array
      environment+=("${temp[$i]%% *}" "${temp[$i]#* }")
    else
      # Already split, just copy
      environment+=("${temp[$i]}" "${temp[$i+1]}")
      i+=1
    fi
  done

  ##########################
  ### Handle other flags ###
  ##########################

  indirect="${1}_singularity_flags[@]"
  flags=(${!indirect+"${!indirect}"})
}

function singular_defaultify()
{
  arg=$1
  shift 1
  case $arg in
    singularity_import) # Export docker image "$1" to singularity. The rest of the arguments are passed on to \
                        # docker2singularity. Mount a custom script into /custom/tosingularity to be executed as \
                        # step 8.5.
      local custom_script
      #**
      # .. envvar:: SINGULARITY_CUSTOM_IMPORT_SCRIPT
      #
      # Specifies custom script to use run when calling ``just singularity import``. (step 8.5)
      #**
      if [ -n "${SINGULARITY_CUSTOM_IMPORT_SCRIPT+set}" ]; then
        custom_script=(--mount source="${SINGULARITY_CUSTOM_IMPORT_SCRIPT}",destination=/custom/tosingularity,type=bind,readonly=true)
      fi

      Docker run -it --rm --privileged --entrypoint= \
          --mount source=/var/run/docker.sock,destination=/var/run/docker.sock,type=bind \
          --mount source="$(pwd)",destination=/output,type=bind \
          ${custom_script[@]+"${custom_script[@]}"} \
          quay.io/singularity/docker2singularity:${DOCKER2SINGULARITY_VERSION-v2.6} bash -c "
            sed -i 's|echo \"(9/10)|echo \"(8.5/10) Custom script\"; [[ -r /custom/tosingularity ]] \\&\\& source /custom/tosingularity; &|' /docker2singularity.sh &&
            /docker2singularity.sh \"\${@}\"" - "${@}"
      extra_args=$#
      ;;
    # singularity_run) # Run a singularity container
    # singularity_exec) # Exec a command with a singularity container
    # singularity_shell) # Run a singularity container shell
    # singularity_instance-start) # Start a singularity container in the background
    # singularity_test) # Run the singularity container's tests
    singularity_*)
      local cmd="${arg#*_}"
      if [ "${cmd}" = "instance-start" ]; then
        cmd="instance start"
      fi
      # No quotes around cmd, to allow for spaces
      Singularity ${cmd} ${@+"${@}"}
      extra_args=$#

      # local image_name="${1}"
      # shift 1
      # local i
      # local env_file

      # # Make a self deleting temp file
      # make_temp_path env_file

      # # Write out env patch file
      # if [ -n "${SINGULARITY_ENV_VARS+set}" ]; then
      #   for (( i=0; i+1<${#SINGULARITY_ENV_VARS[@]}; i+=2 )); do
      #     singularity_env_echo "${SINGULARITY_ENV_VARS[${i}]}" "${SINGULARITY_ENV_VARS[${i}+1]}"
      #   done
      # fi

      # # Generate binds
      # local bind_args=()
      # if [ -n "${SINGULARITY_VOLUMES+set}" ]; then
      #   for (( i=0; i<${#SINGULARITY_VOLUMES[@]}; i++ )); do
      #     bind_args+=(-B "${SINGULARITY_VOLUMES[${i}]}")
      #   done
      # fi

      # function _env_echo(){ singularity_env_echo "${@}" }
      # common_environment_override

      # Singularity ${cmd} -e -c --nv \
      #   ${bind_args+"${bind_args[@]}"} \
      #   -B "${env_file}:/.singularity.d/env/91-just-env.sh:ro" \
      #   -B "/tmp:/tmp:rw" \
      #   ${image_name} ${@+"${@}"}
      ;;

    ## singular-compose_run) # Run
    ## singular-compose_config) # Prints configuration
    ## singular-compose_config-null) # Prints configuration in null sepearated output
    ## singular-compose_shell) # Shell
    singular-compose) # Simple pure bash version of singularity-compose
      ########################################
      ### Parse singular-compose arguments ###
      ########################################
      local compose_files=()
      local args_parsed
      parse_args args_parsed -f +compose_files: --file +compose_files: -- ${@+"${@}"}
      extra_args+="${args_parsed}"
      shift "${args_parsed}"

      ### Handle parsed arguments ###
      if [ "${#compose_files[@]}" != "0" ]; then
        local "${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES"
        dynamic_set_a "${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES" "${compose_files[@]}"
      fi

      # Get subcommand
      local subcommand="${1}"
      extra_args+=1
      shift 1

      case $subcommand in
        run)
          # TODO: parse_args here
          local instance="$1"
          shift 1
          extra_args+=1

          local volumes environment flags
          singularity_load_env "${instance}"

          ###############################
          ### Setup _Singularity call ###
          ###############################

          # Generate binds
          local subcommand_args=()
          if [ -n "${volumes+set}" ]; then
            for (( i=0; i<${#volumes[@]}; i++ )); do
              subcommand_args+=(-B "${volumes[${i}]}")
            done
          fi

          # When -c is used, $HOME, /tmp, /proc, /sys, and /dev are not mounted
          # in directly. The internal /tmp is very limited and quickly starts
          # having problems. So it is best to just mount it in by default.
          if [ "${SINGULARITY_ADD_TMP_DIR-1}" = "1" ]; then
            subcommand_args+=(-B "/tmp:/tmp:rw")
          fi

          # Make Singularity call
          indirect="${instance}_image"
          subcommand_args+=(${flags[@]+"${flags[@]}"} "${!indirect}" ${@+"${@}"})
          extra_args+=$#

          # Check to see if the first element of environment is set, hence no [@]
          if [ -n "${environment+set}" ]; then
            (
              ##########################
              ### Export Environment ###
              ##########################
              for (( i=0; i+1<${#environment[@]}; i+=2 )); do
                # https://github.com/sylabs/singularity/issues/3686
                export "SINGULARITYENV_${environment[${i}]}"="${environment[${i}+1]}"
              done
              function _env_echo()
              {
                export "SINGULARITYENV_${1}"="${2}"
              }
              common_environment_override

              _Singularity
            ) # Do this in a subshell so that these variables don't polute the rest of just
          else
            _Singularity
          fi
          ;;
        config)
          local instance="$1"
          shift 1
          extra_args+=1

          local volumes environment flags
          singularity_load_env "${instance}"

          declare -p environment
          declare -p volumes
          declare -p flags
          ;;
        config-null)
          local instance="$1"
          shift 1
          extra_args+=1

          local volumes environment flags
          singularity_load_env "${instance}"


          null_dump environment environment volumes volumes flags flags
          # Steps to parse
          # 1) Split buy \0\0 (double null)
          # 2) Odds are "name"
          # 3) Evens are null separated entries
          ;;
        *)
          echo "I don't understand: singular-compose $subcommand" >&2
          exit 1
          ;;
      esac
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}