#!/usr/bin/env false

source_once &> /dev/null && return

#*# linux/bin_utils

#**
# ================
# Binary Utilities
# ================
#
# .. default-domain:: bash
#
# .. file:: bin_utils.bsh
#**

: ${VSI_COMMON_DIR="$(dirname "${BASH_SOURCE[0]}")/.."}
source "${VSI_COMMON_DIR}/linux/set_flags.bsh"

#**
# :Functions: - object_bits - Print out the number of bits in an object file (requires nm)
# :Parameters: --bits - Call :func:`object_bits` with on ``$2``
# :Output: --bits - *Stdout* - number of bits in object file
#
# A collection of binary utilities
#
# This file can be sourced to load the functions, or executed for a one time call.
#**

#**
# .. function:: object_bits
#
# :Parameters: ``$1`` - Filename (.o, .a, .so, executable, etc...)
# :Output: *stdout* - Prints the number of bits
# :Uses: ``nm`` - Most OSes have this installed already. Sometimes a binutils package needs to be installed to get this
#
# Prints out the number of bits (typically 32 or 64) in a file
#**
function object_bits()
{
  nm -D "${1}" | sed -En '/^[0-9A-Fa-f]{8,}/ {p; q}' | awk '{print length($1)*4}'
}

if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
  arg=$1
  shift 1

  case $arg in
    --bits)
      object_bits "${@}"
      ;;
    *)
      echo "Unknown argument $arg"
      exit 1
      ;;
  esac
fi

#**
# .. function:: lwhich
#
# :Parameters: * ``$1`` - The number of bits in the architecture to match
#              * ``$2`` - The library to search for. Must match the beginning of the the basename of the library, but may also contain extended (grep) regex.
#              * [``LWHICH_INSENSITIVE``] - Enables case insensitivity. Default: ``0`` (case sensitive)
# :Output: matches - Full path array of matching filenames
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   lwhich 64 libSDL
#   lwhich 32 'libc\.so'
#   lwhich 64 '(libSDL|libOpenGL)'
#
# :Uses: ``nm`` - Most OSes have this installed already. Sometimes a binutils package needs to be installed to get this
#
# which for shared libraries
#
# Searches for a library using the same ld resolution method as the OS. First ``LD_LIBRARY_PATH`` is searched, then ldconfig -p for a match to a filename.
#
# .. rubric:: Bugs 
#
# The purpose of this is to match from the beginning of basename (cf. the full pathname). This is done by using ``$2`` as a partial regex which can cause some undesired behavior. This can occur when using the or '|' operator. This is why the example has parentheses in the '(libSDL|libOpenGL)' expression, so that it works as expected.
#
# This behavior can be taken advantage of by using the or '|' operator without parentheses to do an partial path search.
#
#     lwhich 64 '$|local'
#
# The $ will short-circuit the normal lwhich behavior, and now matches any path containing local, for example all the libraries in /usr/local/lib
#
# Or to find any library with the word linux in the basename:
#
#     lwhich 32 '$|linux[^/]*\.so'
#
# (This will find common libraries such as ld-linux.so and libselinux.so)
#
#**
function lwhich()
{
  local bits=$1
  shift 1
  matches=()
  local filenames=()
  local files
  local case_insensitive=''
  if [ "${LWHICH_INSENSITIVE-0}" != "0" ]; then
    case_insensitive='-i'
  fi

  if [ -n "${LD_LIBRARY_PATH+${LD_LIBRARY_PATH}}" ]; then
    #set -f
    #IFS_OLD="${IFS}"
    IFS=:
    LIBRARY_PATHS=("$LD_LIBRARY_PATH")
    IFS=$'\n' # I don't want splitting arrays on space or tab... JUST in case?

    for d in "${LIBRARY_PATHS[@]}"; do
      files=("$d"/*)

      for match in "${files[@]}"; do #$(ls "$d" | grep ${case_insensitive} -E "^$1"); do
        if [ "${LWHICH_INSENSITIVE-0}" != "0" ]; then
          set_optflag nocasematch
        fi
        if ! [[ "${match##*/}" =~ ^${1} ]]; then
          reset_optflag nocasematch
          continue
        fi
        reset_optflag nocasematch
        if [ -e "$match" ] && isxbit ${bits} "$match" && ! isin "$(basename "$match")" ${filenames+"${filenames[@]}"}; then
          matches+=("$match")
          filenames+=("${match##*/}")
        fi
      done
    done
  fi

  # TODO: if musl (no /etc/ld.so.conf), then search '/lib' '/usr/local/lib' '/usr/lib'

  # This only complicated the wildcard idea, and I don't CARE about this case
  for match in $(${LDCONFIG-ldconfig} -p | grep ${case_insensitive} -E $'^\t'"$1" | awk '{print $(NF)}'); do
    if isxbit ${bits} "${match}" && ! isin "$(basename "$match")" ${filenames+"${filenames[@]}"}; then
      matches+=("${match}")
      filenames+=("$(basename "$match")")
    fi
  done
}
