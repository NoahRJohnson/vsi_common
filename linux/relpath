#!/usr/bin/env bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/relpath

#**
# =============
# Relative Path
# =============
#
# .. default-domain:: bash
#
# .. file:: relpath
#
# :Arguments: * ``$1`` - Target dir
#             * ``$2`` - Start dir
# :Output: *stdout* - relpath
#
# ``Bash`` CLI version of :func:`relpath`
#
# .. seealso::
#   :func:`relpath`
#**
# Based on https://stackoverflow.com/a/14914070/4166604

#**
# .. function:: relpath
#
# :Arguments: * ``$1`` - Target dir
#             * ``$2`` - Start dir
# :Output: *stdout* - relpath
#
# Returns the relative path of the two directories
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   relpath ./bar /foo
#**
function relpath()
{
  current="${1:+"$2"}"
  target="${1:-"$2"}"

  # If dir is ., make it /
  if [[ ${target} =~ ^\./*$ ]]; then
    target="/"
  fi
  if [[ ${current} =~ ^\./*$ ]]; then
    current="/"
  fi
  : "${current:="/"}"

  # Remove trailing and leading slahes, and always start with /
  target="/$(sed -E 's|^/*||;s|/*$||' <<< "${target}")" >&2
  current="/$(sed -E 's|^/*||;s|/*$||' <<< "${current}")" >&2

  # Remove beginning slash, if there is one
  appendix="${target##/}"
  relative=''
  while appendix="${target#"$current"/}"
    [ "$current" != '/' ] && [ "$appendix" = "$target" ]; do
    if [ "$current" = "$appendix" ]; then
      relative="${relative:-.}"
      # Return value
      echo "${relative#/}"
      return 0
    fi
    current="${current%/*}"
    relative="$relative${relative:+/}.."
  done
  relative="$relative${relative:+${appendix:+/}}${appendix#/}"

  # Return value
  echo "$relative"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
  relpath ${@+"${@}"}
  exit $?
fi