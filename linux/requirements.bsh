#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/findin"
source "${VSI_COMMON_DIR}/linux/elements.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/requirements

#**
# .. default-domain:: bash
#
# ============
# Requirements
# ============
#
# .. file:: requirements.bsh
#
# A set of functions for determining the versions of specific programs, and if you meet the required versions
#
# .. function:: meet_requirements
#
# :Arguments: ``$1`` - Version you are checking
#             [``$2``...] - Version rules
#
# * Supports versions of any length, ``1``, ``1.0``, ``1.0.0.0.0.0``, etc...
# * Supports an alpha version after the last number, ``1.0.2rc5``
# * Supported version rules:
#   * ``=`` - Does version equal this version. ``1`` is the same as ``1.0.0``, but not ``1.0.0p1``
#   * ``!=`` - Does the version not equal this version
#   * ``<`` - Is this version less than this version
#   * ``<=`` - Is this version less than or equal to this version
#   * ``>`` - Is this version greater than this version
#   * ``>=`` - Is this version greater than or equal to this version
#   * ``or`` - All rules are ``and`` ed together, unless separated by an ``or``, in which case a new group of ``and`` ed rules are started. Only one group has to be true for the result to be true. There is currently no support for rules more complex than this.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#    meet_requirements 1.0.0 "<2.0.0" ">0.5.0"
#    meet_requirements 1.0.0 =1
#    meet_requirements 1.0.0 "<2.0.0" ">0.5.0" or ">3.0.0"
#    meet_requirements 3.1.0 "<2.0.0" ">0.5.0" or ">3.0.0"
#**
function meet_requirements()
{
  local version="${1}"
  shift 1

  local rv
  local index
  while (( $# > 0 )); do
    index=$(findin "or" "${@}")
    if [ "${index}" == "-1" ]; then
      rv=0
      _meet_requirements "${version}" "${@}" || rv="$?"
      if [ "${rv}" = "2" ]; then
        return 2
      fi
      if [ "${rv}" = "0" ]; then
        return 0
      fi
      break
    else
      rv=0
      _meet_requirements "${version}" "${@:1:$index}" || rv="$?"
      if [ "${rv}" = "2" ]; then
        return 2
      fi
      if [ "${rv}" = "0" ]; then
        return 0
      fi
      shift $((index+1))
    fi
  done

  return 1
}

function _meet_requirements()
{
  local version="${1}"
  shift 1

  while (( $# )); do
    case "${1}" in
      =*)
        if ! version_eq "${version}" "${1:1}"; then
          return 1
        fi
        ;;
      !=*)
        if version_eq "${version}" "${1:2}"; then
          return 1
        fi
        ;;
      \>=*)
        if version_lt "${version}" "${1:2}"; then
          return 1
        fi
        ;;
      \>*)
        if version_eq "${version}" "${1:1}" || version_lt "${version}" "${1:1}"; then
          return 1
        fi
        ;;
      \<=*)
        if version_gt "${version}" "${1:2}"; then
          return 1
        fi
        ;;
      \<*)
        if version_eq "${version}" "${1:1}" || version_gt "${version}" "${1:1}"; then
          return 1
        fi
        ;;
      *)
        echo "Error, I do not understand ${1}" >&2
        return 2
        ;;
    esac
    shift 1
  done
}

#**
# .. function:: version_eq
#
# Checks to see if version ``${1}`` equals ``${2}``. Slightly more complex than a simple ``=``. For example: ``1.0p1`` is the same as ``1.0.0.0p1``
#
# :Arguments: ``$1`` - LHS version
#             ``$2`` - RHS version
#
# .. seealso::
#
#   :func:`meet_requirements`
#**
function version_eq()
{
  local IFS='.'

  # This MUST be in a separate variable for bash 4.3 and newer. If it's not,
  # the last . (is interpreted as an IFS?, and) is force escaped, breaking the
  # regex
  local pattern='([0-9.]*)(.*)'
  [[ ${1} =~ ${pattern} ]]
  local lhs=(${BASH_REMATCH[1]})
  local lhs_remainder="${BASH_REMATCH[2]}"
  [[ ${2} =~ ${pattern} ]]
  local rhs=(${BASH_REMATCH[1]})
  local rhs_remainder="${BASH_REMATCH[2]}"

  # Equalize the lengths
  local i
  if [ "${#rhs[@]}" -gt "${#lhs[@]}" ]; then
    for (( i=${#lhs[@]}; i<${#rhs[@]}; i++ )); do
      lhs[$i]=0
    done
  elif [ "${#lhs[@]}" -gt "${#rhs[@]}" ]; then
    for (( i=${#rhs[@]}; i<${#lhs[@]}; i++ )); do
      rhs[$i]=0
    done
  fi

  if [ "${lhs[*]}" = "${rhs[*]}" -a "${lhs_remainder}" = "${rhs_remainder}" ]; then
    return 0
  fi
  return 1
}

#**
# .. function:: version_lt
#
# Checks to see if version ``${1}`` is less than ``${2}``.
#
# :Arguments: ``$1`` - LHS version
#             ``$2`` - RHS version
#
# .. seealso::
#
#   :func:`meet_requirements`
#**
function version_lt()
{
  local IFS='.'
  local pattern='([0-9.]*)(.*)'
  [[ ${1} =~ ${pattern} ]]
  local lhs=(${BASH_REMATCH[1]})
  local lhs_remainder="${BASH_REMATCH[2]}"
  [[ ${2} =~ ${pattern} ]]
  local rhs=(${BASH_REMATCH[1]})
  local rhs_remainder="${BASH_REMATCH[2]}"

  # Equalize the lengths
  local i
  if [ "${#rhs[@]}" -gt "${#lhs[@]}" ]; then
    for (( i=${#lhs[@]}; i<${#rhs[@]}; i++ )); do
      lhs[$i]=0
    done
  elif [ "${#lhs[@]}" -gt "${#rhs[@]}" ]; then
    for (( i=${#rhs[@]}; i<${#lhs[@]}; i++ )); do
      rhs[$i]=0
    done
  fi

  # Run the check
  for (( i=0; i<${#lhs[@]}; i++ )); do
    if [ "${lhs[$i]}" -lt "${rhs[$i]}" ]; then
      return 0
    elif [ "${lhs[$i]}" -gt "${rhs[$i]}" ]; then
      return 1
    fi
  done

  # You only get here if it's been equal so far
  if [ "${lhs_remainder}" = "${rhs_remainder}" ]; then
    return 1
  elif [ "${lhs_remainder}" = "" ]; then
    return 1
  elif [ "${rhs_remainder}" = "" ]; then
    return 0
  elif [[ "${lhs_remainder}" < "${rhs_remainder}" ]]; then
    return 0
  fi

  return 1
}

#**
# .. function:: version_gt
#
# Checks to see if version ``${1}`` is greater than ``${2}``.
#
# :Arguments: ``$1`` - LHS version
#             ``$2`` - RHS version
#
# .. seealso::
#
#   :func:`meet_requirements`
#**
function version_gt()
{
  local IFS='.'
  local pattern='([0-9.]*)(.*)'
  [[ ${1} =~ ${pattern} ]]
  local lhs=(${BASH_REMATCH[1]})
  local lhs_remainder="${BASH_REMATCH[2]}"
  [[ ${2} =~ ${pattern} ]]
  local rhs=(${BASH_REMATCH[1]})
  local rhs_remainder="${BASH_REMATCH[2]}"

  # Equalize the lengths
  local i
  if [ "${#rhs[@]}" -gt "${#lhs[@]}" ]; then
    for (( i=${#lhs[@]}; i<${#rhs[@]}; i++ )); do
      lhs[$i]=0
    done
  elif [ "${#lhs[@]}" -gt "${#rhs[@]}" ]; then
    for (( i=${#rhs[@]}; i<${#lhs[@]}; i++ )); do
      rhs[$i]=0
    done
  fi

  # Run the check
  for (( i=0; i<${#lhs[@]}; i++ )); do
    if [ "${lhs[$i]}" -gt "${rhs[$i]}" ]; then
      return 0
    elif [ "${lhs[$i]}" -lt "${rhs[$i]}" ]; then
      return 1
    fi
  done

  # You only get here if it has been equal so far
  if [ "${lhs_remainder}" = "${rhs_remainder}" ]; then
    return 1
  elif [ "${lhs_remainder}" = "" ]; then
    return 0
  elif [ "${rhs_remainder}" = "" ]; then
    return 1
  elif [[ "${lhs_remainder}" > "${rhs_remainder}" ]]; then
    return 0
  fi

  return 1
}

#**
# .. function:: split_version_string
#
# :Arguments: - ``$1`` - Variable name to store the array in
#             - ``$2`` - The version string
#
# Splits a version string up into its elements and stores them in an array.
#
# The last element is always the pre-release/metadata. If there is no pre-release or metadata, the last element will be an empty string.
#
# .. rubric:: Example:
#
# .. code-block:: bash
#
#    $ split_version_string x "$(bash_version)"
#    $ declare -p x
#    declare -a x=([0]="5" [1]="0" [2]="11" [3]="r1")
#**
function split_version_string()
{
  [[ ${2} =~ ([0-9.]*)(.*) ]]
  # IFS must come AFTER the regex in bash 4.3 and older. If it's not, the last
  # "." (is interpreted as an IFS, and) is force escaped, breaking the regex
  local IFS='.'
  dynamic_set_a "${1}" ${BASH_REMATCH[1]} "${BASH_REMATCH[2]}"
}

#**
# .. function:: git_version
#
# Retrieves the version number of ``git``.
#
# :Parameters: [``GIT``] - The ``git`` executable what will be called. Can be overwritten to call a different executable. Defaults to ``git``.
# :Output: *stdout* - The ``git`` version number
#**
function git_version()
{
  "${GIT-git}" --version | awk '{print $3}'
}

#**
# .. function:: docker_version
#
# Retrieves the version number of ``docker``.
#
# :Parameters: [``DOCKER``] - The ``docker`` executable what will be called. Can be overwritten to call a different executable. Defaults to ``docker``.
# :Output: *stdout* - The ``docker`` version number
#**
function docker_version()
{
  local version="$("${DOCKER-docker}" --version | awk '{print $3}')"
  echo "${version%,}"
}

#**
# .. function:: docker_compose_version
#
# Retrieves the version number of ``docker-compose``.
#
# :Parameters: [``DOCKER_COMPOSE``] - The ``docker-compose`` executable what will be called. Can be overwritten to call a different executable. Defaults to ``docker-compose``.
# :Output: *stdout* - The ``docker-compose`` version number
#**
function docker_compose_version()
{
  local version="$("${DOCKER_COMPOSE-docker-compose}" --version | awk '{print $3}')"
  echo "${version%,}"
}

#**
# .. function:: bash_version
#
# Retrieves the version number of ``bash``.
#
# :Parameters: [``BASH``] - The ``bash`` executable what will be called. Can be overwritten to call a different executable. Defaults to ``bash``.
# :Output: *stdout* - The ``bash`` version number
#**
function bash_version()
{
  "${BASH-bash}" --version | sed -n${sed_flag_rE} 's|[^0-9]+([0-9.()]*).*|\1|;s|\((.*)\)|r\1|;p;q'
}

#**
# .. function:: tar_version_info
#
# Sets the vendor and version number of ``tar``.
#
# :Parameters: [``TAR``] - The ``tar`` executable what will be called. Can be overwritten to call a different executable. Defaults to ``tar``.
# :Output: - ``tar_vendor`` - The ``tar`` vendor (BSD or GNU)
#          - ``tar_version`` - The ``tar`` version number
#**
function tar_version_info()
{
  local version_info="$("${TAR-tar}" --version)"
  if [[ "${version_info}" == "tar (GNU tar)"* ]]; then
    tar_version="$(echo "${version_info}" | awk 'NR==1{print $4}')"
    tar_vendor="GNU"
  # macOS
  elif [[ "${version_info}" == "bsdtar"* ]]; then
    tar_version="$(echo "${version_info}" | awk '{print $2}')"
    tar_vendor="BSD"
  # busybox
  elif [[ "${version_info}" == "tar (busybox)"* ]]; then
    tar_version="$(echo "${version_info}" | awk '{print $3}')"
    tar_vendor="BUSYBOX"
  else
    tar_version="$(echo "${version_info}" | awk 'NR==1{print $NF}')"
    tar_vendor="unknown"
  fi
}
