#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/time_tools

#**
# ==========
# Time Tools
# ==========
#
# .. default-domain:: bash
#
# .. file:: time_tools.bsh
#
#**

#**
# .. function:: get_time_seconds
#
# Print the epoch time in seconds
#
# Uses the date command to print nanosecond-accurate epoch time, if your date command supports that feature.
#
# Else, uses python or ruby if available to get microsecond-accurate time. If all else fails, use the date command, which sometimes does not support more than second accuracy.
#**
get_time_seconds()
{
  # If this date doesn't support nanoseconds
  if [[ ! $(date +%N) =~ ^[0-9]+$ ]]; then
    local python_cmd="import time; print('%0.9f' % time.time())"
    if command -v python &> /dev/null; then
      python -c "${python_cmd}"
    elif command -v python3 &> /dev/null; then
      python3 -c "${python_cmd}"
    elif command -v ruby &> /dev/null; then
      ruby -e "print Time.now.to_f"
    # Add other elif commands here for other common languages. Perl needs a
    # plugin, so that's a no-go.
    else # Else, just do seconds; best I can do
      date '+%s.0'
    fi
  else
    date '+%s.%N'
  fi
}

#**
# .. function:: timeout
#
# :Arguments: * ``$1`` - Timeout in integer seconds
#             * ``$2``... - Command to execute
# :Return Value: 142 on time out
# :Uses: perl
#
# macOS function similar to linux timeout
#
# .. rubric:: Bugs
#
# Since this uses SIGALRM, bash will print out "Alarm clock: 14" to indicate SIGALRM (14) has been raised. This could cause unexpected text in stderr if you are parsing it.
#
# .. seealso::
#
#    https://www.cyberciti.biz/faq/shell-scripting-run-command-under-alarmclock/
#**
if [[ ${OSTYPE-} = darwin* ]]; then
  # https://perldoc.perl.org/functions/alarm.html
  function timeout()
  {
    perl -e 'use warnings;

      no warnings;
      {
        local *STDOUT;
        eval "use Time::HiRes qw(ualarm)";
      }

      if ( $@ ) {
        # No Time::HiRes, use alarm
        my $delay = shift;

        if ( ($delay > 0) && ($delay < 1) ) {
          $delay = 1;
        };

        eval {
          local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
          alarm $delay;
          exec @ARGV;
          alarm 0;
        };
        if ($@) {
          die unless $@ eq "alarm\n";   # propagate unexpected errors
        };
      } else {
        # Time::HiRes

        eval {
          local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
          ualarm(1_000_000 * shift);
          exec @ARGV;
          ualarm(0);
        };
        if ($@) {
          die unless $@ eq "alarm\n";   # propagate unexpected errors
        };
      };' "${@}"
  }
fi

if [[ ! $(date +%N) =~ ^[0-9]+$ ]]; then
  _tictoc_cmd="date +%s000000000"
else
  _tictoc_cmd="date +%s%N"
fi

#**
# .. function:: tic
#
# Part of a tic/toc functionality to easily take time measurements.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   $ tic
#   $ sleep 1.3
#   $ toc_ms
#   1302 ms
#
# .. seealso::
#  :func:`toc`, :func:`toc_ms`, :func:`toc_ns`
#**
function tic()
{
  _time0="$($_tictoc_cmd)"
}

#**
# .. function:: toc
#
# Prints the time passed since calling :function:`toc` in seconds (rounded).
#
# Also stores the number of seconds passed in ``toc_time``
#**
function toc()
{
  # Make it round
  toc_time=$(($($_tictoc_cmd)-_time0+500000000))
  # If less than 1 s, make it 0, or else removing 9 digits doesn't work
  if [ "${toc_time}" -lt "1000000000" ]; then
    toc_time=0
  else
    toc_time="${toc_time::${#toc_time}-9}"
  fi
  echo "${toc_time} s"
}

#**
# .. function:: toc_ms
#
# Prints the time passed since calling :function:`toc` in milliseconds (rounded).
#
# Also stores the number of milliseconds passed in ``toc_time``
#
# .. note::
#
#   Older ``date`` commands that don't support nanoseconds, will not be more accurate than a second.
#**
function toc_ms()
{
  toc_time=$(($($_tictoc_cmd)-_time0+500000))
  # If less than 1 ms, make it 0, or else removing 6 digits doesn't work
  if [ "${toc_time}" -lt "1000000" ]; then
    toc_time=0
  else
    toc_time="${toc_time::${#toc_time}-6}"
  fi
  echo "${toc_time} ms"
}

#**
# .. function:: toc_ns
#
# Prints the time passed since calling :function:`toc` in nanoseconds.
#
# Also stores the number of nanoseconds passed in ``toc_time``
#
# .. note::
#
#   Older ``date`` commands that don't support nanoseconds, will not be more accurate than a second.
#**
function toc_ns()
{
  toc_time=$(($($_tictoc_cmd)-_time0))
  echo "${toc_time} ns"
}
