if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

JUST_DEFAULTIFY_FUNCTIONS+=(docker_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

source "${VSI_COMMON_DIR}/linux/docker_functions.bsh"

#*# just/plugins/docker/just_docker_functions

#**
# =========================
# J.U.S.T. Docker Functions
# =========================
#
# .. default-domain:: bash
#
# .. file:: just_docker_functions.bsh
#
# .. function:: docker_defaultify
#
# .. command:: build_recipes
#
# :Arguments: [``$1``]... - Recipe names to run
#
# Runs ``docker-compose build`` for the docker recipes. Useful command to call before ``docker build`` on your own project that uses recipes in vsi_common, to keep them synced with your build.
#
# .. command:: build_recipes-auto
#
# :Arguments: ``$1``... - Dockerfiles to parse
#
# Scans dockerfiles for ``vsiri/recipe:`` images, and calls :cmd:`build_recipes` on the recipes discovered. Accepts multiple files and ``-`` for stdin
#
# .. command:: log
#
# :Arguments: [``$1``]... - Service names
#
# Show logs from all service containers. Optionally specify service names to only log specific containers.
#
# .. warning::
#
#   Does not pick up containers that didn't exist when starting ``just`` log
#
# Override the log target in your ``Justfile`` and call ``__docker-compose-log`` if you need to set other parameter.
#
# .. command:: docker_clean
#
# :Arguments: ``$1`` - Volume to be removed
#
# Runs ``docker volume rm`` on the specified volume. If the volume is in use, there are four strategies to handle this:
#
# 1. ``ask`` - (default) Interactively asks you if you want to use the stop, delete, or error strategy.
# 2. ``stop`` - Attempts to stop the containers with a 30 second timeout and then forcefully remove the current containers mounting the volume, without prompting
# 3. ``delete`` - Mounts the volume and deletes all of the files. May not work when a container is running a database, or the volumes modified by the entrypoint, i.e. adding user permissions.
# 4. ``error`` - Errors out instead of cleaning the volume
#
# The action for a specific volume is specified by setting the label ``com.vsi.just.clean_action``.
#
# For example, in a ``docker-compose.yaml`` file:
#
# .. code-block:: yaml
#
#   volumes:
#     venv:
#       labels:
#         com.vsi.just.clean_action: ask
#
# delete
# ------
#
# In the case of ``delete`` strategy, an optional labels ``com.vsi.just.clean_setup`` can be specified to designate what just target to run to repopulate a volume. Typically this just target should run ``sh -c ":"`` or similar. This allows the entrypoint or another command to properply setup the volume, and set permissions, etc...
#
#**
function docker_defaultify()
{
  arg=$1
  shift 1
  case $arg in
    build_recipes) # Build recipes
      JUST_DOCKER_COMPOSE_DIR="${VSI_COMMON_DIR}/docker/recipes" \
          COMPOSE_FILE="${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml" \
          Docker-compose build ${@+"${@}"}
      extra_args=$#
      ;;
    build_recipes-auto) # Build recipes used in specified dockerfiles. "-" for \
                        # stdin; multiple files (via wildcards) accepted
      if [ "$#" = "0" ]; then
        source "${VSI_COMMON_DIR}/linux/colors.bsh"
        echo "${RED}ERROR:${NC} You must pass at least one argument to build recipes-auto" >&2
        return 1
      fi

      local recipes=($(sed -nE '/^ *[fF][rR][oO][mM] vsiri\/recipe:/{
                                  s|.*vsiri/recipe:([^ ]+).*|\1|
                                  /\$/d
                                  p
                                }' ${@+"${@}"} | sort -u))
      if [ "${#recipes[@]}" != "0" ]; then
        justify build recipes "${recipes[@]}"
      fi
      extra_args=$#
      ;;
    docker_clean) # Delete a docker volume. The next container to use this \
                  # volume will automatically copy any content from the image.
      if docker volume inspect "${1}" &> /dev/null; then
        local x=0
        local rm_out
        rm_out="$(Docker volume rm "${1}" 2>&1)" || x=$?

        echo "${rm_out}"

        if [ "${x}" != "0" ]; then
          local pattern='volume is in use - \[(.*)\]'
          [[ ${rm_out} =~ ${pattern} ]]
          local OLD_IFS="${IFS}"
          IFS=", "
          local containers=(${BASH_REMATCH[1]})
          IFS="${OLD_IFS}"

          pattern='"com\.vsi\.just\.clean_action": "([^"]+)"'
          local action
          local volume_inspect="$(docker volume inspect "${1}")"
          if [[ ${volume_inspect} =~ $pattern ]]; then
            action="${BASH_REMATCH[1]}"
          else
            action=ask
          fi

          _docker_clean_actions "${1}" "${action}"
        fi
      else
        echo "${1} already removed" >&2
      fi

      extra_args=1
      ;;
    docker-compose_clean) # Delete a docker-compose volume. The next container \
                          # to use this volume will automatically copy any
                          # content from the image.
      justify docker_clean "${COMPOSE_PROJECT_NAME}_${1}"
      extra_args=1
      ;;
    docker-compose_enter) # Enter a running container, running an interactive
                          # bash session. Set COMPOSE_SERVICES to limit to a
                          # specific service. Additional arguments are run in
                          # lieu of bash
      # not Docker-compose; no quotes
      local containers=($(docker-compose ps -q ${COMPOSE_SERVICES-} || :))
      if [ "${#containers[@]}" == 0 ]; then
        echo "No running containers found"
        extra_args=$#
        return
      elif [ "${#containers[@]}" == 1 ]; then
        local picked=1
      else
        local picked
        local pretty=()
        for picked in "${!containers[@]}"; do
          pretty[${picked}]="$(docker container inspect -f \
              '{{index .Config.Labels "com.docker.compose.service"}} - {{.Name}} ({{.Config.Hostname}})' \
              ${containers[$picked]}) $(docker ps --format {{.Status}} -f id=${containers[$picked]})"
        done
        picker "${pretty[@]}" || picked=$?
      fi

      # Give the dev a way to override the -it flags, should they ever need to
      local DOCKER_EXTRA_EXEC_ARGS=("${DOCKER_EXTRA_EXEC_ARGS[@]--it}")

      if [ "$#" = "0" ]; then
        Docker exec "${containers[$((picked-1))]}" bash
      else
        Docker exec "${containers[$((picked-1))]}" ${@+"${@}"}
      fi
      extra_args=$#
      ;;
    docker-compose_log) # Show logs from all service containers. Optionally \
         # specify service names to only log specific containers. Bug: Does \
         # not pick up containers that didn't exist when starting just log

      # Override the log target in your Justfile and call __docker-compose-log
      # if you need to set other parameters
      justify __docker-compose-log ${@+"${@}"}
      extra_args=$#
      ;;
    __docker-compose-log)
      function stop_logging(){ JUST_STOP_LOGGING=1; }
      JUST_STOP_LOGGING=0
      trap stop_logging INT
      trap stop_logging TERM
      while [ "${JUST_STOP_LOGGING}" == "0" ]; do
        Docker-compose logs --tail=20 -f ${@+"${@}"} || echo $?
        while [ "${JUST_STOP_LOGGING}" == "0" ] && ! docker_service_running | grep running > /dev/null; do
          sleep 1
        done
      done
      trap - INT
      trap - TERM
      extra_args=$#
      ;;

    docker) # Run generic docker command
      Docker ${@+"${@}"}
      extra_args=$#
      ;;

    docker-compose) # Run generic docker-compose command
      Just-docker-compose ${@+"${@}"}
      extra_args=$#
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}

# :Arguments: ``$1`` - Volume to be removed
#             ``$2`` - Action to take
# :Parameters: ``containers`` - Array of containers using volume
#              ``volume_inspect`` - String of the result from ``docker volume inspect ${1}``
function _docker_clean_actions()
{
  case "${2}" in
    ask)
      echo "The following containers are using ${1}:"
      echo "${containers[*]}"

      local action
      picker "Stop and forcefully remove these containers then try again" \
             "Deletes all of the volumes files and repopulate" \
             "Do nothing and error" > /dev/null || action=$?

      if [ "${action}" = "1" ]; then
        _docker_clean_actions "${1}" stop
      elif  [ "${action}" = "2" ]; then
        _docker_clean_actions "${1}" delete
      elif  [ "${action}" = "3" ]; then
        _docker_clean_actions "${1}" error
      else
        _docker_clean_actions "${1}" unknown
      fi
      ;;
    delete)
      # Remove the files
      Docker run --rm --mount "type=volume,src=${1},dst=/data" alpine sh -c "find /data -maxdepth 1 -mindepth 1 -print0 | xargs -0 rm -rf"

      # If there is a com.vsi.just.clean_setup label
      pattern=$'"com\.vsi\.just\.clean_setup": "([^\n]*)"\n'
      if [[ ${volume_inspect} =~ $pattern ]]; then
        # Parse \" to "
        setup_cmd="${BASH_REMATCH[1]//\\\"/\"}"
        # Evaluate this string into arguments. By definition this is arbitrary
        # code execution, so eval is acceptable.
        eval "setup_cmd=(${setup_cmd})"
        # Run the just target
        justify "${setup_cmd[@]}"
      else
        echo "No 'com.vsi.just.clean_setup' label found for volume ${1}" >&2
        # false
      fi
      ;;
    stop)
      for x in "${containers[@]}"; do
        Docker stop -t 30 "${x}"
        Docker rm -f "${x}" || :
      done
      Docker volume rm "${1}"
      ;;
    error)
      false
      ;;
    *)
      echo "Unknown action ${2}"
      false
      ;;
  esac
}

# Idea from Issue #103
function set_docker_compose_project_name()
{
  if [ "${COMPOSE_PROJECT_NAME:+set}" != "set" ]; then
    local cwd_var="${JUST_PROJECT_PREFIX}_CWD"
    local user_var="${JUST_PROJECT_PREFIX}_USERNAME"
    if [ "${!user_var:+set}" = "set" ]; then
      COMPOSE_PROJECT_NAME=$(docker_compose_sanitize_project_name "${!cwd_var}" "${!user_var}")
    else
      COMPOSE_PROJECT_NAME=$(docker_compose_sanitize_project_name "${!cwd_var}")
    fi
  fi
}
