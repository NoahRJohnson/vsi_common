#!/usr/bin/env false

source_once >&/dev/null && return

#*# linux/dir_tools

#**
# ===============
# Directory Tools
# ===============
#
# .. default-domain:: bash
#
# .. file:: dir_tools.bsh
#
#**

#**
# .. function:: parent_find_files
#
# :Arguments: ``$1``... - The names of the files being searched for
# :Return Value: file_matches - array containing matches
#
# Find files by searching up the parent tree
#
# Searches for files to use. It starts by checking the current directory, and goes up. Just like git searches for a .git directory
#**
parent_find_files()
{
  local name
  local pwd_before
  file_matches=()
  # Speed improvement: if it's right there, echo it out right away
  for name in "${@}"; do
    if [ -f "${name}" ]; then
      file_matches+=("${PWD}/${name}")
    fi
  done

  \pushd . > /dev/null
    # Search for the file until some match is found
    while [ "${#file_matches[@]}" -eq 0 ]; do
      for name in "${@}"; do
        if [ -f "${name}" ]; then
          file_matches+=("$(\cd "$(dirname "${name}")"; \pwd)/$(basename "${name}")")
        fi
      done

      pwd_before="${PWD}"

      \cd ..

      # This works both when PWD starts with / and //
      if [ "${PWD}" == "${pwd_before}" ]; then
        break
      fi
    done
  \popd > /dev/null
}

#**
# .. var:: _VSI_TEMP_DIRS
#
# .. note::
#   Do **NOT** mess with this variable. It is used to force recursive remove directories, and any mishaps could result in serious injury to computer, and you, depending on how upset you get by losing your computer.
#**
_VSI_TEMP_DIRS=()

#**
# .. function:: make_temp_dir
#
# :Arguments: [``$1``...] - Optionally add additional arguments to mktemp call. The most useful thing to add would be -t, as this is in all the OSes
# :Output: ``temp_dir`` - Name of temporary directory
#
# Create self cleaning temp directories
#
# .. rubric:: Usage
#
# Use this to create a self deleting temp file. If you do not want to have it self delete, just use "mktemp -d".
#
# Can be called multiple times
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   make_temp_dir
#   touch "${temp_dir}"/file1
#
#   # Do NOT
#   t=$(make_temp_dir)
#   # or
#   (
#     make_temp_dir
#     touch "${temp_dir}"/file2
#   ) # The temp_dir is deleted here
#   cat "${temp_dir}"/file2 # Fails
#   # As these will create and delete the temp dir within the subcommand
#
# .. note::
#   This uses the EXIT, INT, and TERM traps. If you use these too, they will be lost. Override :func:`make_temp_dir_cleanup_exit`, :func:`make_temp_dir_cleanup_int`, or :func:`make_temp_dir_cleanup_term` to customize with your trap and still call :func:`__make_temp_dir_cleanup`.
#**
make_temp_dir()
{
  temp_dir="$(mktemp -d ${@+"${@}"})"
  _VSI_TEMP_DIRS+=("${temp_dir}")
  trap make_temp_dir_cleanup_exit EXIT
  trap make_temp_dir_cleanup_int INT
  trap make_temp_dir_cleanup_term TERM
}

#**
# .. Rubric:: make_temp_dir_cleanup_*
#
# .. function:: make_temp_dir_cleanup_exit
#
#   cleanup routine on atexit
#
# .. function:: make_temp_dir_cleanup_int
#
#   cleanup routine on interrupt
#
# .. function:: make_temp_dir_cleanup_term
#
#   cleanup routine on terminate
#
# Since :func:`make_temp_dir` sets the trap every time :func:`make_temp_dir` is called, these functions provide a way to override the behavior of the trap, allowing you to write your own make_temp_dir_cleanup_* functions. Just don't forget to add :func:`__make_temp_dir_cleanup` to your function, or else it will not cleanup properly.
#
# This is only needed for exit, int, and term. No other traps are set up.
#**
make_temp_dir_cleanup_exit()
{
  __make_temp_dir_cleanup
}
make_temp_dir_cleanup_int()
{
  __make_temp_dir_cleanup
}
make_temp_dir_cleanup_term()
{
  __make_temp_dir_cleanup
}

#**
# .. function:: __make_temp_dir_cleanup
#
# .. rubric:: Used By
#
# :func:`make_temp_dir`, make_temp_dir_cleanup_*
#**
__make_temp_dir_cleanup()
{
  local temp_dir
  for temp_dir in ${_VSI_TEMP_DIRS+"${_VSI_TEMP_DIRS[@]}"}; do
    if [ -d "${temp_dir}" ]; then
      rm -rf "${temp_dir}"
    fi
  done
}

#**
# .. function:: normpath
#
# :Argumetns: * ``$1`` - path
#
# :Output: *stdout* - Normalized path
#
# Prints out a normalized version of the path. With .., //, and ./ simplified out, and removes trailing /
#
# Unlike :file:`real_path`, this works on non-existing path, but is not as reliable as :file:`real_path`
#**
normpath()
{
  local IFS
  local x
  local components
  local new_components=()
  local absolute=0

  IFS=/
  components=(${1})

  # Special for absolute path
  if [ "${1:0:1}" = "/" ]; then
    absolute=1
  fi

  for x in "${!components[@]}"; do
    current="${components[$x]}"
    if [ "${current}" = "." ] || [ -z "${current}" ]; then
      continue
    elif [ "${current}" = ".." ]; then
      if [ "${#new_components[@]}" = "0" ]; then
        if [ "${absolute}" = "1" ]; then
          continue
        else
          new_components+=("${current}")
        fi
      else
        if [ "${new_components[${#new_components[@]}-1]}" = ".." ]; then
          new_components+=("${current}")
        else
          unset "new_components[${#new_components[@]}-1]"
        fi
      fi
    else
      new_components+=("${current}")
    fi
  done

  if [ "${absolute}" = "1" ]; then
    echo "/${new_components+${new_components[*]}}"
  elif [ "${#new_components[@]}" -gt 0 ] && [ "${new_components[0]}" = ".." ]; then
    echo "${new_components[*]}"
  else
    if [ "${#new_components[@]}" -gt 0 ]; then
      echo "./${new_components+${new_components[*]}}"
    else
      echo "."
    fi
  fi
}

#**
# .. function:: basenames
#
# :Arguments: * ``$1`` - Number of levels to keep
#             * ``$2`` - path
# :Output: *stdout* - base name up to ``$1`` levels deep
#
# Multiple level version of basename
#
# .. note::
#   ``basenames 2 test`` will result in ``./test`` as the implied dirname is ``.``
#**
basenames()
{
  local IFS=/
  local components=($(normpath "${2}"))
  local -i min=${#components[@]}-$1

  min=$(($min<0?0:$min))

  echo ${components+"${components[*]:${min}}"}
}