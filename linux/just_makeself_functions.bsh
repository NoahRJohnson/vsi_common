#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

JUST_DEFAULTIFY_FUNCTIONS+=(makeself_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"
source "${VSI_COMMON_DIR}/linux/command_tools.bsh"

#*# just/plugins/just_makeself_functions

#**
# ===========================
# J.U.S.T. Makeself Functions
# ===========================
#
# .. default-domain:: bash
#
# .. file:: just_makeself_functions.bsh
#**

#**
# .. function:: makeself_defaultify
#**
function makeself_defaultify()
{
  arg=$1
  shift 1

  # Must be version after 2.4.2, I need a working ARCHIVE_DIR and append.
  # https://github.com/megastep/makeself/issues/213
  # https://github.com/megastep/makeself/issues/216
  local JUST_MAKESELF_VERSION=${JUST_MAKESELF_VERSION:-d9a61e67803f95c4d91050932347811a00aa38e9}
  local PROJECT_CWD="${JUST_PROJECT_PREFIX}_CWD"
  PROJECT_CWD="${!PROJECT_CWD}"

  case $arg in
    #**
    # .. command:: makeself_setup-local
    #
    # Download and install makeself locally in Project's CWD/build/makeself
    #**
    makeself_setup-local) # Setup makeself locally
      mkdir -p "${PROJECT_CWD}/build/makeself"
      pushd "${PROJECT_CWD}/build/makeself"
        curl -LO "https://github.com/megastep/makeself/archive/${JUST_MAKESELF_VERSION}/makeself.tar.gz"
        tar xf makeself.tar.gz --strip-components=1
        rm makeself.tar.gz

        # Disable makeself's argument parser (so all arguments go to just by
        # default) and make quiet the default
        sed '1,/^while true/s|^while true|while \\${MAKESELF_PARSE-false}|; 1,/^quiet="n"/s|^quiet="n"|quiet="y"|' \
            "${PROJECT_CWD}/build/makeself/makeself-header.sh" > "${PROJECT_CWD}/build/makeself/makeself-header_just.sh"
      popd &> /dev/null
    ;;
    #**
    # .. command:: makeself_just-project-locally
    #
    # :Arguments: * ``[--tests]`` - Include unit tests. Calling this from another project is tricky though. For example, ``./just --wrap bash -c 'JUSTFILE="${VSI_COMMON_DIR}/Justfile" just test'``
    # :Uses: - ``tar`` - Only works with GNU Tar on the path.
    #
    # Creates a just project executable using makeself. Should be called from the main project's just project, or else directory paths will not line up. After the initial executable is added, called to :command:`makeself_add-files-locally` should be made to add project files. For example:
    #
    # * Project: ``foo`` in ``.``
    # * Submodule: ``bar`` in ``./external/bar``
    # * VSI Common in ``./external/bar/external/vsi_common``
    #
    # #. Call: ``just makeself_just-project-locally`` in ``.``
    # #. Get bar relative dir: ``local bar_rel="$(relative_path "${BAR_CWD}" .)" # NOTE: Does not start with ./``
    # #. Call: ``makeself_add-files-locally ./external/bar '"--show-transformed --transform s|^\./|./${bar_rel}/| --exclude=.git --exclude=./docs --exclude=./external --exclude=./tests"'`` in ``.``
    # #. Call: ``makeself_add-files-locally ./ '"--exclude=.git --exclude=./docs --exclude=./external/bar --exclude=./tests"'`` in ``.``
    #
    # All calls are made from the root repo directory (``.``), and the output will be in ``./dist``
    #**
    makeself_just-project-locally) # Make a self extracting executable for a just \
        # project, locally. Add "--tests" flag to include VSI Common's unit tests. \
        # Unit tests can be run via: just --wrap bash -c 'cd ${VSI_COMMON_DIR}; just test'
      local include_unit_tests
      parse_args extra_args --tests include_unit_tests -- ${@+"${@}"}
      if [ "${include_unit_tests}" = "0" ]; then
        include_unit_tests='--exclude=test-*.bsh'
      else
        include_unit_tests=""
      fi

      if [ ! -f "${PROJECT_CWD}/build/makeself/makeself.sh" ]; then
        justify makeself setup-local
      fi

      # Ideally, this should be the App's CWD, since just projects cd into their
      # Project CWD. We want the dist dir relative to what ever dir we are in now.
      mkdir -p "./dist"

      # Review: Does the transform below handle (multiple) spaces in the path correctly???
      local vsi_common_rel="$(relative_path "${VSI_COMMON_DIR}" .)" # Does not start with ./

      # Start by adding just vsi_common, and transform it to have the same relative path as vsi_common_dir really has.
      # NOTE: This will only work on gnu-tar
      "${PROJECT_CWD}/build/makeself/makeself.sh" \
          --header "${PROJECT_CWD}/build/makeself/makeself-header_just.sh" \
          --noprogress --nomd5 --nocrc --nox11 --keep-umask \
          --tar-extra "--show-transformed --transform s|^\./|./${vsi_common_rel}/| ${include_unit_tests} --exclude=./docs --exclude=.git --exclude=*.egg-info" \
          "${VSI_COMMON_DIR}" ./dist/just just_label "./${vsi_common_rel}/freeze/just_wrapper"
      # You can't put quotes in tar-extra apparently, it'll screw things up.
      ;;
    #**
    # .. command:: makeself_add-files-locally
    #
    # :Arguments: * ``$1`` - Directory to add
    #             * ``[$2]`` - Extra tar flags to be passed to makeself/tar
    #
    # After the initial just executable is created by calling :command:`makeself_just-project-locally`, project directories are called using :command:`makeself_add-files-locally`
    #
    # The second argument should be used to exclude files, and in complicated situations, set up path transforms.
    # * Simple: ``${project_dir}/external/vsi_common``
    # * Complicated: ``${project_dir}/external/${other_project}/external/vsi_common``
    #
    # .. seealso::
    #   :command:`makeself_just-project-locally`
    #**
    makeself_add-files-locally) # Append files to a makeself executable
      MAKESELF_PARSE=true "${PROJECT_CWD}/build/makeself/makeself.sh" \
          --header "${PROJECT_CWD}/build/makeself/makeself-header_just.sh" \
          --noprogress --nomd5 --nocrc --nox11 --keep-umask \
          --tar-extra "${2-}" --append \
          "${1}" ./dist/just

      if [ "${2+set}" ]; then
        extra_args=2
      else
        extra_args=1
      fi
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}
