#!/usr/bin/env bash

#*# linux/check_shell

#**
# ===========
# Check Shell
# ===========
#
# .. default-domain:: bash
#
# .. file:: colors.bsh
#
# Script to inspect the shell you are running, to make sure you are running the expected shell. Commonly used in script you source
#
# :Arguments: ``$1...`` - Valid names of shells
# :Return Value: * ``0`` - Check passed
#                * ``1`` - Check failed
# :Uses: * ``/proc`` or ``ps``. ``ps`` must support the ``-p`` and ``-o`` flags.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#    check_shell bash
#    check_shell zsh bash
#    check_shell csh fish
#
#**

set -eu

# Prefer /proc, it's more standard than ps's support for -p and -o
if [ -d /proc ]; then
  proc_data="$(</proc/$$/stat)"

  pattern='\) [^ ]* ([0-9]+) '
  [[ ${proc_data} =~ ${pattern} ]]
  ppid="${BASH_REMATCH[1]}"

  # This could result in "-bash" on WSL 1... I don't know why, how, nor where else that would likely happen. csh often appears as "-sh".
  # IFS= read -r -d '' parent_name < "/proc/${ppid}/cmdline"

  # This method consistently gives the expected result
  pattern='\((.*)\)'
  [[ ${proc_data} =~ ${pattern} ]]
  parent_name="${BASH_REMATCH[1]}"

elif command -v ps &> /dev/null; then
  ppid="$(ps -p $$ -o ppid=)"
  parent_name="$(ps -p "${ppid}" -o comm=)"
else
  # Can't determine parent shell, so assume everything is ok
  exit 0
fi

shell_ok=0
IFS=',' shells="${*}"
while (( $# )); do
  # Check "shellname" and "/dir/shellname", both common, based on how you start the shell
  if [ "${parent_name}" = "$1" ] || [[  ${parent_name} = */$1 ]]; then
    shell_ok=1
    break
  fi
  shift 1
done

if [ "${shell_ok}" = "0" ]; then
  echo "Your shell was detected to be ${parent_name}, not ${shells}. You must be running ${shells} to source ${shells} scripts" >&2
  exit 1
fi

exit 0