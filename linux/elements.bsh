#!/usr/bin/env false
# Source this file

#*# linux/elements

#**
# ==================
# Array Manipulation
# ==================
#
# .. default-domain:: bash
#
# .. file:: elements.bsh
#
# Set of -euE safe functions to make ``bash`` array manipulation easy
#
# Set of functions for deleting, prepending and appending without repetition. Versions using actual ``Bash`` arrays are suffixed with an _a, else it works on delimiter (IFS) separated string
#
# Most of these functions use variable indirection when possible to make using them friendlier.
#
# .. rubric:: Bugs
#
# Don't use arrays element_array variable
#
#   * __element_array_target_a
#   * __element_array_target_a2
#   * __element_array_target_s
#   * __element_array_target_s2
#   * __element_array_target_d
#
# as the target. It will cause name collision
#
# .. note::
#   Not intended for POSIX sh
#**

: ${VSI_COMMON_DIR="$(dirname "${BASH_SOURCE[0]}")/.."}
source "${VSI_COMMON_DIR}/linux/set_flags.bsh"

#**
# .. function:: dynamic_set_a
#
# :Arguments: * ``$1`` - Name of array to be set
#             * [``$2...``] - Values to set
#
# Dynamically set an array to values from arguments
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   dynamic_set_a my_array_name 11 "2 2" 33
#   # Is like executing
#   # my_array_name=(11 "2 2" 33)
#
# .. note::
#   Does not clear the array named by ``$1``. So if the array had 4 elements in it and :func:`dynamic_set_a` is called with 3 elements, the 4th element is still set.
#
# This is not a bug, but by design. "unset" the array prior to calling :func:`dynamic_set_a` if you wish to avoid this.
#**
function dynamic_set_a()
{
  local __element_array_target_d="${1}"
  shift 1
  local IFS='' # If I don't do this, leading and trailing whitespace are dropped
  for (( i=0; $#; i++ )); do
    read -r "${__element_array_target_d}[$i]" <<< "${1}"
    shift 1
  done
}

#**
# .. function:: clear_a
#
# :Arguments: ``$1`` - Name of array to be cleared
# :Output: Returns ``1`` on invalid variable name
#
# Slightly safer indirect clear array
#
# .. note::
#   Still uses eval, but makes sure the variable name appears valid
#**
function clear_a()
{
  # https://stackoverflow.com/a/2821201/4166604
  if [[ ! ${1} =~ [a-zA-Z_]+[a-zA-Z0-9_]* ]]; then
    return 1
  fi
  eval "${1}=()"
}

#**
# .. function:: remove_element_a
#
# :Arguments: * ``$1`` - Name of array to be set
#             * ``$2`` - Value to be removed
#
# Removes all instances of a value from an array
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   x=(11 22 33 22 44)
#   remove_element_a x 22
#   # declare -a x='([0]="11" [1]="33" [2]="44")'
#
# .. note::
#   The resulting array is sequentially indexed, which is not typical in ``bash`` when removing elements from an array
#**
function remove_element_a()
{
  local __element_array_target_a=()

  if [ "${!1+set}" == "set" ]; then
    local target=${1}[@]
    __element_array_target_a=( ${!target} )
    unset target
  else # If it's empty/does not exist, there is nothing to remove
    return 0
  fi
  local i

  for i in "${!__element_array_target_a[@]}"; do
    if [ "${__element_array_target_a[$i]}" == "${2}" ]; then
      # http://wiki.bash-hackers.org/syntax/arrays#destruction
      unset "__element_array_target_a[$i]"
    fi
  done

  # Do NOT use unset here. If you do that, you will lose "local" status if the
  # variable that $1 points to has it. This can have MANY unintended
  # consequences which is generally BAD! Gotta eval :(
  # https://stackoverflow.com/questions/10497425/is-it-possible-to-use-array-in-bash#comment74842477_10497539
  eval "${1}=()"

  # You can't use ${t+"${t[@]}"} notation when there is a chance that the first
  # element of an array has been unset. This will falsely trigger ${t} as not
  # existing because ${t} REALLY means ${t[0]} which doesn't exist, but the rest
  # of ${t[@]} DOES! Solution is to disable set -u if it's set, and then
  # re-enable it if and only if it was set before all this. set_flags contains
  # this logic. t is __element_array_target_a
  unset_flag u
  dynamic_set_a "${1}" "${__element_array_target_a[@]}"
  reset_flag u
}

#**
# .. function:: remove_element
#
# :Arguments: * ``$1`` - Name of string to be set
#             * ``$2`` - String to be removed
# :Paramters: [``IFS``] - IFS Separator used
#
# String version of remove_element_a
#**
function remove_element()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  remove_element_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#**
# .. function:: add_element_post_a
#
# :Arguments: * ``$1`` - Name of array to be set
#             * ``$2`` - Value to be appended
#
# Add a value to the end of an array
#
# Removes all copies of the value from the array first, and then appends to the end of the array
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   x=(22 11 22 33)
#   add_element_post_a x 22
#   declare -p x
#   # declare -a x='([0]="11" [1]="33" [2]="22")'
#
# .. note::
#   The resulting array is sequentially indexed
#**
function add_element_post_a()
{
  remove_element_a "${1}" "${2}"
  local target="${1}[@]"
  local __element_array_target_a=()
  if [ "${!1+set}" == "set" ]; then
    __element_array_target_a=( ${!target} )
  fi
  dynamic_set_a "${1}" ${__element_array_target_a+"${__element_array_target_a[@]}"} "${2}"
}

#**
# .. function:: add_element_post
#
# :Arguments: * ``$1`` - Name of string to be set
#             * ``$2`` - String to be appended
# :Parameters: [``IFS``] - IFS Separator used
#
# String version of :func:`add_element_post_a`
#**
function add_element_post()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  add_element_post_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#**
# .. function:: add_element_pre_a
#
# :Arguments: * ``$1`` - Name of array to be set
#             * ``$2`` - Value to be prepended
#
# Add a value to the beginning of an array
#
# Removes all copies of the value from the array first, and then prepends to the beginning of the array
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   x=(11 22 33 22)
#   add_element_pre_a x 22
#   declare -p x
#   # declare -a x='([0]="22" [1]="11" [2]="33")'
#
# .. note::
#   The resulting array is sequentially indexed
#**
function add_element_pre_a()
{
  remove_element_a "${1}" "${2}"
  local target="${1}[@]"
  local __element_array_target_a=()
  if [ "${!1+set}" == "set" ]; then
    __element_array_target_a=( ${!target} )
  fi
  dynamic_set_a "${1}" "${2}" ${__element_array_target_a+"${__element_array_target_a[@]}"}
}

#**
# .. function:: add_element_pre
#
# :Arguments: * ``$1`` - Name of string to be set
#             * ``$2`` - String to be appended
# :Parameters: [``IFS``] - IFS Separator used
#
# String version of :func:`add_element_post_a`
#**
function add_element_pre ()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  add_element_pre_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#**
# .. function:: cmp_elements_a
#
# :Arguments: * ``$1`` - First array name
#             * ``$2`` - Second array name
# :Output: Return Value: ``0`` - Identical, ``1`` - Not identical
#
# Checks if two arrays are the same
#**
function cmp_elements_a()
{
  local x
  local __element_array_target_a
  local __element_array_target_a2

  # Have to copy https://unix.stackexchange.com/a/374094/123413 Thanks darwin!
  x="${1}[@]"
  __element_array_target_a=(${!1+"${!x}"})
  x="${2}[@]"
  __element_array_target_a2=(${!2+"${!x}"})

  if [ ${#__element_array_target_a[@]} -ne ${#__element_array_target_a2[@]} ]; then
    return 1
  fi

  for ((x=0; x<${#__element_array_target_a[@]}; x++)); do
    if [ "${__element_array_target_a[$x]}" != "${__element_array_target_a2[$x]}" ]; then
      return 1
    fi
  done

  return 0
}

#**
# .. function:: cmp_elements
#
# :Arguments: * ``$1`` - First string name
#             * ``$2`` - Second string name
# :Output: Return Value: ``0`` - Identical, ``1`` - Not identical
#
# String version of :func:`cmp_elements_a`
#**
function cmp_elements()
{
  local __element_array_target_s=()
  local __element_array_target_s2=()
  local target

  target="${1}"
  __element_array_target_s=( ${!target} )
  target="${2}"
  __element_array_target_s2=( ${!target} )

  cmp_elements_a __element_array_target_s __element_array_target_s2
  return $?
}

#**
# .. function:: split_s
#
# :Arguments: * ``$1`` - Target array name
#             * ``$2``... - Strings
# :Parameters: * [``MIFS``] - A Multichararater Internal Field Separator.
#              * Default: //
#
# Splits an string into an array, using an ``MIFS``
#
# .. rubric:: Author
#
# https://stackoverflow.com/a/47633817/4166604
#**
function split_s()
{
  local target="${1}"
  shift 1

  local __element_array_target_a=()
  local bit
  local MIFS="${MIFS-//}"

  if [ "${MIFS-}" == "" ]; then
    echo "MIFS is not set" >&2
    return 1
  fi

  for bit in ${@+"${@}"}; do
    bit+=${MIFS}
    # If I do this before the for loop, bash 3.2 (macOS) does not work right
    while [ -n "${bit}" ]; do
      __element_array_target_a+=( "${bit%%${MIFS}*}" )
      bit="${bit#*${MIFS}}"
    done
  done

  # If I don't reset IFS here, dynamic_set_a will set incorrectly on bash 3.2
  dynamic_set_a "${target}" ${__element_array_target_a+"${__element_array_target_a[@]}"}
}

#**
# .. function:: join_a
#
# :Arguments: * ``$1`` - Target array name
#             * ``$2``... - Strings
# :Parameters: * [``MIFS``] - A Multichararater Internal Field Separator.
#             * Default: //
#
# Joins an array into a string, using an ``MIFS``
#**
function join_a()
{
  if [ $# -eq 1 ]; then
    return 0
    # This means target is never set. This mirrors the behavior of split_s.
    # Note: I do not `unset $1` due to the same locality-is-lost-bug referenced
    # in remove_element_a
  fi

  local target="$1"
  shift 1

  local bit
  local MIFS="${MIFS-//}"

  local __element_array_target_s="${1-}"
  shift 1

  while [ $# -gt 0 ]; do
    __element_array_target_s+="${MIFS}${1}"
    shift 1
  done

  read -r "${target}" <<< "${__element_array_target_s-}"
}

#**
# .. function:: join_a_out
#
# :Arguments: * ``$1`` - Hex code for IFS
#             * ``$2``... - Strings
# :Parameters: * [``MIFS``] - A Multichararater Internal Field Separator, using awk escape format. (Except for null, which is a double backslash \\x00).
#              * Default: //
#              * Note: If you are using "" or $'' notation, you will need "\\\\x00"
#
# Instead of storing the value to a variable, this outputs to stdout. Unlike :func:`join_a`, :func:`join_a_out` can handle special characters, like null. Because macOS awk is so difficult, instead of '\x00' for null, use '\\x00'. No other form of null will work on macOS. All other sed escape character should work.
#
# .. rubric:: Author
#
# https://superuser.com/a/720157/352118
#**
function join_a_out()
{
  awk -v MIFS="${MIFS-//}" \
      'function sep(){
        for(x=1;x<=length(MIFS);x++){
          if(substr(MIFS, x, 2)=="\\x"){
            c2=tolower(substr(MIFS, x+2, 1))
            c1=tolower(substr(MIFS, x+3, 1))
            k=index("123456789abcdef", c2)*16+index("123456789abcdef", c1)
            printf "%c", k
            x+=3
          }else{
            printf "%c", substr(MIFS, x, 1)
          }
        }
      }
      BEGIN{
        ORS=OFS="";
        for(i=1;i<ARGC;i++){
          print ARGV[i]
          if(ARGC-i-1){
            sep()
          }
        }
      }' ${@+"${@}"}
}

#**
# .. function:: is_array
#
# :Arguments: * ``$1`` - variable name
#
# :Output: Returns ``0`` if variable is an array, else ``1``
#
# Determines if ``$1`` is an array or not. If it is not defined, still returns ``1``
#**
function is_array()
{
  local var_name="${1}"
  local signature="$(declare -p "${var_name}")"

  # Handle Bash 4.2 namereffing https://stackoverflow.com/a/42877229/4166604
  local regex='^declare -[[:alpha:]]*n[[:alpha:]]* [^=]+=\"([^\"]+)\"$'
  while [[ ${signature} =~ ${regex} ]]; do
    signature="$(declare -p ${BASH_REMATCH[1]})"
  done

  # Check if is array
  regex='^declare -[[:alpha:]]*a[[:alpha:]]* '
  [[ ${signature} =~ ${regex} ]]
}

#**
# .. function:: to_array
#
# :Arguments: * ``$1`` - variable name
#
# .. Note::
#   Uses eval to convert to array, because of this, () and other special characters can cause code injection
#
#   .. code-block:: bash
#
#     $ x="test); echo foo; q=("
#     $ to_array x
#     foo
#
#     $ x="test\)\; echo foo; \("
#     # or
#     $ x="'test);' echo 'foo;' '('"
#     $ to_array x
#     # Works without side effect
#**
function to_array()
{
  # Don't try and escape special characters, cause then you end up putting \'s
  # in quoted string, which is not what we want
  if ! is_array "${1}"; then
    # Eval method :(
    eval "$1=(${!1})"
  fi
}