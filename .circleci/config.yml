version: 2.1

# -----
# generic yaml anchors (reusable by multiple projects)
# -----
x-stuff:
  # container configuration & update
  container_config: &container_config
    working_directory: ~/repo
    shell: /bin/bash -eu
    docker:
      - image: vsiri/circleci:bash-compose-lfs

commands:
  submodule_checkout:
    description: Checks out submodules
    steps:
      - run:
          name: Checkout submodules
          command: |
            git submodule sync
            git submodule update --recursive --init
  dependencies_and_smuggle:
    description: Install dependencies and copies the source dir to the remote docker host
    steps:
      - run:
          name: Install test dependencies and smuggle vsi to host
          command: |
            apk add --no-cache perl jq
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            . setup.env
            tar c . | docker run -i --rm -v /root/repo:/src -w /src alpine:3.11 tar x

jobs:
  compile_docs_and_common_source:
    <<: *container_config

    steps:
      - checkout
      - submodule_checkout
      - setup_remote_docker
      - dependencies_and_smuggle

      - run:
          name: Run integration tests common_source
          command: |
            . setup.env
            just test int common_source

      - run:
          name: Generate docs
          command: |
            . setup.env
            tar c . | docker run -i --rm -v /root/repo:/src -w /src alpine:3.11 tar x
            SPHINXOPTS='-W  --keep-going' just sphinx build compile -n --all
            docker run --rm -v /root/repo:/src -w /src alpine:3.11 tar c ./docs/_build/html | tar x

      - persist_to_workspace:
          root: docs/_build
          paths: html

  run_bash_tests:
    <<: *container_config
    parallelism: 3
    steps:
      - checkout
      - submodule_checkout
      - setup_remote_docker
      - dependencies_and_smuggle
      - run:
          name: Run test on Bash Versions
          command: |
            # install the circleci cli
            source setup.env
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
            versions="3.2 4.0 4.1 4.2 4.3 4.4 5.0"
            versions=($(echo "${versions}" | tr ' ' '\n' | circleci tests split))
            export TESTLIB_SKIP_TESTS="Distribution name for"
            # This was actually slower:
            # if [ "${CIRCLE_BRANCH}" != "master" ]; then
            #   export JUST_DOCKER_COMPOSE_PUSH=0
            # fi
            just build recipes-auto docker/bash_test.Dockerfile
            for version in "${versions[@]}"; do \
              # This was actually slower:
              # just ci load "${version}"
              just build bash "${version}"
              just test docker "${version}" all tests
            done

  deploy_docs:
    <<: *container_config
    steps:
      - checkout
      - attach_workspace:
          at: /docs
      - run:
          name: Checkout gh-pages and update
          command: |
            # Load the functions new_just uses
            source ./linux/just_files/new_just

            git checkout gh-pages || git checkout --orphan gh-pages
            git reset --hard # This is important if gh-pages was just created
            git rm $(git ls-files)
            mv /docs/html/* ./
            touch .nojekyll

            # restore new_just file
            git show "origin/${CIRCLE_BRANCH}:linux/just_files/new_just" > ./new_just
            # patch the missing functions with copies from the sourced version above
            function_names=($(sed -nE 's|^ *function (.*)\(\)\{ :;}|\1|p' ./new_just))

            for function_name in "${function_names[@]}"; do
              declare -pf "${function_name}" | sed -i '/function '"${function_name}"'(){ :;}/{r /dev/stdin
                                                                                              d}' ./new_just
            done

            git add --all
            if [ "$(git status --porcelain -uno | wc -l)" != "0" ]; then
              git config --global user.email "circleci@cirleci.com" > /dev/null 2>&1
              git config --global user.name "CircleCI" > /dev/null 2>&1
              git commit -m "Autobuild documentation [ci skip]"
              git remote set-url origin "https://${GH_NAME}:${GH_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
              git push origin gh-pages
            fi

# -----
# CircleCI workflows
# -----
workflows:
  vsi_common:
    jobs:
      - run_bash_tests
      - compile_docs_and_common_source
      - deploy_docs:
          requires:
            - compile_docs_and_common_source
          filters:
            branches:
              only:
                - master
