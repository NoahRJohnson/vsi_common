.. default-domain:: bash

=========================================
Git Mirror
=========================================

.. file:: git_mirror

While creating a git mirror is as simple as ``git clone --mirror``, unfortunately this git command does not support git submodules or lfs. The subcommands mirror, push and clone in this file, and associated functions, help in creating and subsequently cloning a mirror of a project with submodules and/or git lfs.

.. rubric:: Example

Example usage:

1. ``git_mirror mirror https://github.com/visionsystemsinc/vsi_common.git master`` - Mirror the repository and recursively create mirrors of all submodules currently in the master branch.
2. Transfer ``vsi_common_prep/transfer_{date}.tgz`` to your destination
3. Write an ``info.env`` file:

.. code-block:: bash

    repos[.]=https://my_repo.com/foobar/vsi_common.git
    repos[docker/recipes]=https://my_repo.com/foobar/recipes.git

4. ``git_mirror push ./info.env ./transfer_extracted_dir/`` - Push the mirrored repository and all submodules to a new git server as defined by info.env
5. ``git_mirror clone ./info.env ./my_project_dir/`` - Clone recursively from the new mirror

.. var:: GIT

Name/path of git executable

Instead of hard-coding "git" everywhere, use the variable :var:`GIT` so that when the need comes, it is easier to switch which executable gets called. Default is ``git``.

.. note::
  When using the GIT env variable in this file, do not surround it with quotes as you normally would. Although this prevents using a path to ``git`` with a space in it, in exchange, it may be possible (eventually) to enable a dry-run-ish capability if GIT is set to 'echo git'. However, this feature does not currently work and even in the future may not work very well because this script is constantly cloning and cd'ing to new repos.

.. function:: os_compatible_mktemp

OS-compatible version of mktemp -p

:Arguments: ``$1`` - the location in which to make the temporary directory
:Output: the path, ${1}/{a_temp_dir}, to the temporary directory

Make a temporary directory in a specific location. This emulates the "mktemp -p DIR" behavior for OS's that don't support it (macOS)

TODO: Move to dir_tools

.. function:: next_section

Change the color of the text output to sdtout/stderr

:Arguments: [``${@}``] - An optional string (or list of strings) to harold the next section
:Output: A temporary file is created which stores the index into the COLORS array

Change the current text color. A temporary file is created to track the current index into the COLORS array; this index is updated with each call to this function. This temporary file will automatically be deleted

TODO: Move to colors.bsh
TODO: switch to colors.bsh:get_color

.. function:: get_submodule_names

Get list of initialized submodules, non-recursive

:Output: A newline separated list of submodules for the current git repository

Get a list of submodules of the current git repository. This command is non-recursive, i.e., submodules of submodule, etc. are not returned. An implementation of this feature is provided for older versions of git (<2.6)

.. rubric:: Example

.. code-block:: bash

  get_submodule_names() # from within ./vsi_common/
  # submodule.docker/recipes

.. rubric:: Note

Unlike ``git submodule foreach --quiet 'echo "${name}"'``, this function works for submodules that have been init'd but not updated

.. function:: git_mirror_has_lfs

Is git lfs available for the specified implementation of git

:Output: ``0`` - git lfs is available
         ``1`` - git lfs is not available

:Internal Use: ``__git_mirror_has_lfs`` - A variable to save this state

.. function:: clone_submodules

Mirror a submodule and all of its submodules (recursively)

This is a helper function to :func:`git_mirror_main`. Create a mirror of each submodule in a git repository, recursively. Each mirror is stored according to its full relative path in the top-level repository in a unique temporary directory created in the PREP_DIR. Submodules of a submodule are processed recursively in a depth-first fashion.

WARNING: ``git submodule foreach`` runs commands via sh because git is weird; however I start bash and source this script for its vars and functions, so it's really bash again.

:Arguments: ``PREP_DIR`` - The directory in which to mirror the submodules
            [``base_submodule_path``] - The (relative) path from the top-level repository to the submodule (i.e., ``git submodule foreach '$displaypath'`` assuming the CWD is the root of the top-level repository)

:Output: A mirrored submodule located at ``PREP_DIR/{temp_dir}/base_submodule_path``

.. function:: clone_from_mirror

Clone a submodule and any of its submodules (recursively)

This is a helper function to git_clone_main. Recursively clone a submodule mirrored with :func:`git_mirror_main`, and fixup the submodules' remote urls according to the mapping specified by ``$1``.

WARNING: ``git submodule foreach`` runs commands via sh because git is weird; however I start bash and source this script for its vars and functions, so it's really bash again.

:Arguments: ``$1`` - A file specifying the mapping between each repository's original url and its mirror url
            [``base_submodule_path``] - The (relative) path from the top-level repository to the submodule
:Output: The recursively cloned submodule

.. function:: git_mirror_main

Mirror the main repository and all submodules (recursively)

Downloads a mirror of a git repository and all of its submodules. The normal ``git clone --mirror`` command does not support submodules at all. This at least clones all the submodules available in the specified branch (master by default).

The script creates a directory, ``{repo_name}_prep``, which will contain all of the repositories plus a single ``transfer_{date}.tgz`` archive file containing all the repositories, lfs objects, etc... Only this `tgz` file needs to be transferred to your destination.

Subsequent calls to :func:`git_mirror_main` use the existing ``{repo_name}_prep`` directory as cache, updating faster than the last time.

Subsequent calls also create a second ``tgz`` file, ``transfer_{date1}_transfer_{date2}.tgz``. This is an incremental archive file. Instead of having to bring in an entire archive, only the incremental file is needed (plus the original full archive).

After you have moved the transfer archive to its destination, you can use :func:`git_push_main` to push these mirrored repositories to a new git server.

:Arguments: * ``$1`` - URL of the main git repository. On subsequent calls to this function, the prep (cache) dir created by this function can be used in lue of the repository's URL
            * [``$2``] - The git branch from which to identify the submodules. Default: master
:Output: A directory, ``{repo_name}_prep``, which will contain all of the repositories plus a single ``transfer_{date}.tgz``

.. rubric:: Example

Mirror the vsi_common repository and all of its submodules in a directory called ./vsi_common_prep. Then, create an archive file that can be transferred to your destination.

.. code-block:: bash

git_mirror_main https://github.com/visionsystemsinc/vsi_common.git master
# produces ./vsi_common_prep/transfer_2020_03_02_14_16_09.tgz

.. rubric:: Example

Calling ``git_mirror`` again will use the vsi_common_prep dir as a cache, and then create an incremental file.

.. code-block:: bash

git_mirror_main vsi_common_prep
# produces ./vsi_common_prep/transfer_2020_03_02_14_24_12_transfer_2020_03_02_14_16_09.tgz

.. rubric:: Example

Both of these examples result in identical mirrors on your destination:

.. code-block:: bash

tar zxf transfer_2020_03_02_14_16_09.tgz
tar --incremental zxf transfer_2020_03_02_14_24_12_transfer_2020_03_02_14_16_09.tgz

###

tar zxf transfer_2020_03_02_14_24_12.tgz

.. rubric:: Note

``git_mirror_main`` does not mirror all submodules that have ever been part of the repo, only those from a specific branch/sha/tag you specify (master by default). This is because trying to mirror all submodules from the past could be very lengthy, and is very likely to include urls that do not exist anymore.

.. function:: git_clone_main

Clone recursively from the new mirror

Once the repository has been mirrored to the new git server with :func:`git_push_main`, it can be cloned. However, because the .gitmodules file will point to different urls than the mirrors, and changing the .gitmodules file will change the repo, which we don't want to do, we need to make a shallow clone of the repository, init the submodules, modify the submodules' urls, and then finally update the submodules. And all of this has to be done recursively for each submodule. As you can tell, this is very tedious, so this script will do it all for you.

:Arguments: ``$1`` - A file specifying the mapping between each repository's original url and its mirror url
            [``$2``] - The directory in which to clone the repo

.. rubric:: Example

.. code-block:: bash

git_clone_main init.env ~/

.. function:: git_push_main

Push the mirrored repository and all submodules to a new git server

After transferring the archive file created by :func:`git_mirror_main` to your destination and extracting it, this function pushes all the mirrored repositories in the extracted archive to your own mirrors on a new git server.

.. note:: The mirrors must be init'd on the git server.

However, because the urls for your mirrors will be different from the original repo urls in .gitmodules, and modifying the urls will change the git repo, which we do not want to do, you must create a file specifying the mapping between each repository's original url and its mirror url (remote). The main repo is referred to as ``.`` while the rest of the repos are referred to by the relative path with respect to the main repo (e.g. ``external/vsi_common``). These need to be stored in an associative array called ``repos``.

:Arguments: ``$1`` - A file specifying the mapping between each repository's original url and its mirror url
            ``$2`` - The extracted prep dir from :func:`git_mirror_main`

.. rubric:: Example

.. code-block:: bash

In this example, the main repo's mirror url is ``https://my_repo.com/foobar/vsi_common.git``, and the submodule stored at ``./docker/recipes`` has the url ``https://my_repo.com/foobar/recipes.git``. This file is also used by :func:`git_clone_main`.

cat info.env
repos[.]=https://my_repo.com/foobar/vsi_common.git
repos[docker/recipes]=https://my_repo.com/foobar/recipes.git

git_push_main info.env vsi_common_prep

