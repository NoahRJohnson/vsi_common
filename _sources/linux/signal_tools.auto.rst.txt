============
String Tools
============

.. default-domain:: bash

.. file:: signal_tools.bsh

Function to help handle signals and traps in bash


.. function:: set_bashpid

Sets the ``BASHPID`` environment variable in bash versions older than 4, for compatibility in bash 3.2

.. function:: trap_chain

:Arguments: * ``$1`` - Command to be read and executes when the shell received signal ``$2``
            * ``$2`` - Same sigspecs that the ``trap`` command accepts.
:Parameters: * ``TRAP_CHAIN_QUIET`` - Set to ``1`` to silence warnings, if you don't want them. Default: ``0``
:Outputs: ``_TRAP_CHAIN_{signal name}_LAST_PID`` - the PID last time :func:`trap_chain` was called

Can be called multiple times to chain multiple signal handlers to one signal. Stores list of trap functions in ``_TRAP_CHAIN_{signal name}``.

Handlers are run in the opposite order they are assigned in (FILO).

.. rubric:: Bugs

If :func:`trap_chain` is called inside a subshell on bash 4.2 or newer when the original trap was set using the ``trap`` command instead of :func:`trap_chain`, the traps of the parent are auto inherited in the subshell.  This is due to a change in how the ``trap`` command works, and there is no known automatic work around. If this happens, you'll need to clear the trap in or before the subshell to prevent this. A warning message will be printed out, unless disabled via ``TRAP_CHAIN_QUIET``.

.. note::

   If you are using signal ``ERR``, you must have ``set -E`` set, or else it will not inherit correctly. The same goes for ``DEBUG`` and ``RETURN`` with ``set -T``. This is part of normal ``bash`` behavior, however the same bug mentioned above, can happened if you ``set +E`` or ``set +T`` before creating a subshell, and then re-enabling the same flag before calling :func:`trap_chain`. A different warning is printed out, unless disabled via ``TRAP_CHAIN_QUIET``.


