.. default-domain:: bash

======================
J.U.S.T. Git Functions
======================

.. file:: just_git_functions.bsh

git plugin for just

.. envvar:: GIT

Name/path of git executable

Instead of hard-coding "git" everywhere, use the variable :envvar:`GIT` so that when the need comes, it is easier to switch which executable gets called. Set to empty string to have any calls to git skipped.

All :func:`git_defaultify` targets will be skipped if the value of:envvar:`GIT` is not found or empty.

.. function:: submodule-helper-list

"git submodule--helper list" bash port

Reproduces what git submodule-helper-list does. Not all versions of git
are modern enough to have this feature. Currently, the first three columns
of information and --prefix are not reproduced because they are not needed.

:Arguments: [``$1...``] - Glob expressions to be matched, just like '`git-submodule--helper`'

:Output: ``submodule_names`` - array of submodules names (matched if filters supplied)

         ``submodule_paths`` - corresponding array of submodule paths

.. function:: _checkout_git_submodule

Helper function for :func:`safe_git_submodule_update`

:Arguments: ``$1`` - Submodule name

            ``$2`` - Submodule path (relative)

            ``$3`` - Message to print out if submodule update failed

:Output: ``presskey`` - set variable presskey on failure

.. function:: safe_git_submodule_update

Update git submodules in a smart way

git submodules are already confusing enough to work with. When a project
gets big and complicated, and add to that the potential of losing changes
that have already been committed, the default behavior of submodules is
enough to have anyone committed!

A git submodule update should update a submodule *if and only if* it is a
**ff-only merge**, and the submodule is clean (enough). Also, non-conflicting
unstaged changes are also ok too.

.. rubric:: Bugs

If the committer of the main repository changes submodules in a non-fast
forward way, this would confuse :func:`safe_git_submodule_update` because that isn't
very smart.
Update: It will at least tell you which repositories are behind now.

:Arguments: [``$1..``] - Specify submodule paths to update. None defaults to all

:Parameters: ``$show_summary_message`` - For internal use. Disables error summary messages

.. function:: git_reattach_heads

Reattach detached heads in submodules.

Search for all submodules recursively in the current working directory for repos with detached heads. Looks through the branch heads for a name (in the form of refs/heads/branch_name). If a match is found, only the first one is used. If no match found, empty string, then branch is left detached.

.. function:: git_defaultify

Git plugin for just

